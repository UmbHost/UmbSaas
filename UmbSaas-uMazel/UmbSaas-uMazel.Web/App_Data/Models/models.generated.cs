//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v8.1.0
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

[assembly: PureLiveAssembly]
[assembly:ModelsBuilderAssembly(PureLive = true, SourceHash = "26878e298e032c70")]
[assembly:System.Reflection.AssemblyVersion("0.0.0.1")]

namespace Umbraco.Web.PublishedModels
{
	// Mixin Content Type with alias "abstractConfigNode"
	/// <summary>(Common) Abstract Config Node</summary>
	public partial interface IAbstractConfigNode : IPublishedContent
	{
	}

	/// <summary>(Common) Abstract Config Node</summary>
	[PublishedModel("abstractConfigNode")]
	public partial class AbstractConfigNode : PublishedContentModel, IAbstractConfigNode
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractConfigNode";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractConfigNode, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractConfigNode(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>(C) Appearance Settings</summary>
	[PublishedModel("folderAppearanceSettings")]
	public partial class FolderAppearanceSettings : PublishedContentModel, IAbstractConfigNode
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "folderAppearanceSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderAppearanceSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public FolderAppearanceSettings(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>(C) Configuration Folder</summary>
	[PublishedModel("folderConfiguration")]
	public partial class FolderConfiguration : PublishedContentModel, IAbstractConfigNode
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "folderConfiguration";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderConfiguration, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public FolderConfiguration(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>(C) Cookie Settings</summary>
	[PublishedModel("configCookieSettings")]
	public partial class ConfigCookieSettings : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "configCookieSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ConfigCookieSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public ConfigCookieSettings(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Allow All Button Text: The caption for the Allow All button.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("allowAllButtonText")]
		public string AllowAllButtonText => this.Value<string>("allowAllButtonText");

		///<summary>
		/// Allow None Button Text: The caption for the Allow None button.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("allowNoneButtonText")]
		public string AllowNoneButtonText => this.Value<string>("allowNoneButtonText");

		///<summary>
		/// Background Color
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backgroundColor")]
		public string BackgroundColor => this.Value<string>("backgroundColor");

		///<summary>
		/// Buttons Color
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonsColor")]
		public string ButtonsColor => this.Value<string>("buttonsColor");

		///<summary>
		/// Cookies Page URL: Destination URL for More Info Link. Link will not be displayed if an URL is not entered here.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("cookiesPageURL")]
		public IPublishedContent CookiesPageUrl => this.Value<IPublishedContent>("cookiesPageURL");

		///<summary>
		/// Disable Cookie Consent: Check this box if you want to disable cookie consent functionality.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disableCookieConsent")]
		public bool DisableCookieConsent => this.Value<bool>("disableCookieConsent");

		///<summary>
		/// Message: Dialog's message displayed to visitors.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("message")]
		public string Message => this.Value<string>("message");

		///<summary>
		/// More Info Button Text: The caption for the More Info link. Link will not be displayed if the caption is not filled.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("moreInfoButtonText")]
		public string MoreInfoButtonText => this.Value<string>("moreInfoButtonText");

		///<summary>
		/// Text Color
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("textColor")]
		public string TextColor => this.Value<string>("textColor");

		///<summary>
		/// Title: Dialog's title displayed to visitors.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>(C) Dashboard Settings</summary>
	[PublishedModel("configDashboardSettings")]
	public partial class ConfigDashboardSettings : PublishedContentModel, IAbstractConfigNode
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "configDashboardSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ConfigDashboardSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public ConfigDashboardSettings(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Accented Text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("accentedText")]
		public string AccentedText => this.Value<string>("accentedText");

		///<summary>
		/// Body Text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("bodyText")]
		public IHtmlString BodyText => this.Value<IHtmlString>("bodyText");
	}

	/// <summary>(C) Global Configuration Settings</summary>
	[PublishedModel("configGlobalSettings")]
	public partial class ConfigGlobalSettings : PublishedContentModel, IAbstractConfigNode
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "configGlobalSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ConfigGlobalSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public ConfigGlobalSettings(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Add site name as suffix to page titles: If you check this box, the site name will be added as a suffix to page browser titles in the form "Pagetitle - Sitename", except from the home page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("addSuffix")]
		public bool AddSuffix => this.Value<bool>("addSuffix");

		///<summary>
		/// Alternate Logo: This logo will be automatically displayed when you have a dark background (essentially, when you have selected your top menu to be displayed in light color). When you scroll down, it will be automatically replaced with the default logo.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("alternateLogo")]
		public IPublishedContent AlternateLogo => this.Value<IPublishedContent>("alternateLogo");

		///<summary>
		/// Use Description from OG if Meta Description Empty: Uses the description tag value as the meta description value if the meta description tag is left empty.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("copyMetaDescriptionFromOgIfEmpty")]
		public bool CopyMetaDescriptionFromOgIfEmpty => this.Value<bool>("copyMetaDescriptionFromOgIfEmpty");

		///<summary>
		/// Use Title From OG if Browser Title Empty: Uses the og:title tag value as the meta title value if the browser title field is left empty. If both are empty, the page's name (node name) is used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("copyMetaTitleFromOgIfEmpty")]
		public bool CopyMetaTitleFromOgIfEmpty => this.Value<bool>("copyMetaTitleFromOgIfEmpty");

		///<summary>
		/// Default Http-Equiv Meta Tags: Add Meta tags with the "http-equiv" attribute (instead of "name") that will be included in every page, unless explicitly specified otherwise on a specific page or pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("defaultHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> DefaultHttpEquivMetaTags => this.Value<IEnumerable<NcMetaTagItem>>("defaultHttpEquivMetaTags");

		///<summary>
		/// Default Meta Tags: Add Meta tags that will be included in every page, unless explicitly specified otherwise on a specific page or pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("defaultMetaTags")]
		public IEnumerable<NcMetaTagItem> DefaultMetaTags => this.Value<IEnumerable<NcMetaTagItem>>("defaultMetaTags");

		///<summary>
		/// Default OG Image: If you set a default image, it will be used if any other condition is not met.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("defaultOGImage")]
		public IPublishedContent DefaultOgimage => this.Value<IPublishedContent>("defaultOGImage");

		///<summary>
		/// Default OG Tags: Add OG tags that will be included in every page, unless explicitly specified otherwise on a specific page or pages. Title, Description and Type tags will be ignored.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("defaultOgTags")]
		public IEnumerable<NcOpenGraphItem> DefaultOgTags => this.Value<IEnumerable<NcOpenGraphItem>>("defaultOgTags");

		///<summary>
		/// Default Section Margin: If not selected, default value will be 0
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("defaultSectionMargin")]
		public string DefaultSectionMargin => this.Value<string>("defaultSectionMargin");

		///<summary>
		/// Default Section Margin (Extra Small Screens)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("defaultSectionMarginExtraSmallScreens")]
		public string DefaultSectionMarginExtraSmallScreens => this.Value<string>("defaultSectionMarginExtraSmallScreens");

		///<summary>
		/// Default Section Margin (Mobile)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("defaultSectionMarginMobile")]
		public string DefaultSectionMarginMobile => this.Value<string>("defaultSectionMarginMobile");

		///<summary>
		/// Default Section Padding: If not selected, default value will be 60
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("defaultSectionPadding")]
		public string DefaultSectionPadding => this.Value<string>("defaultSectionPadding");

		///<summary>
		/// Default Section Padding (Extra Small Screens)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("defaultSectionPaddingExtraSmallScreens")]
		public string DefaultSectionPaddingExtraSmallScreens => this.Value<string>("defaultSectionPaddingExtraSmallScreens");

		///<summary>
		/// Default Section Padding (Mobile)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("defaultSectionPaddingMobile")]
		public string DefaultSectionPaddingMobile => this.Value<string>("defaultSectionPaddingMobile");

		///<summary>
		/// Favicon and touch icon: Suggested size: 310x310px. The icon will be resized to all commonly used dimensions.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("favicon")]
		public IPublishedContent Favicon => this.Value<IPublishedContent>("favicon");

		///<summary>
		/// Fields for OG Description: Enter the property aliases of the fields you want the description Open Graph tag to take values from if it is empty (must select Page Fields as policy above for this to work). The first non-empty field found will be used. Separate property aliases with a comma (,)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("fieldsForOGDescription")]
		public string FieldsForOgdescription => this.Value<string>("fieldsForOGDescription");

		///<summary>
		/// Fields for OG Image: Enter the property aliases of the fields you want the image Open Graph tag to take values from if it is empty (must select Page Fields as policy above for this to work). The first non-empty field found will be used. Separate property aliases with a comma (,). Only properties of type Textbox, Multiple Media Picker, Upload Field and image Cropper will have their values used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("fieldsForOGImage")]
		public string FieldsForOgimage => this.Value<string>("fieldsForOGImage");

		///<summary>
		/// Fields for OG Title: Enter the property aliases of the fields you want the title Open Graph tag to take values from if it is empty (must select Page Fields as policy above for this to work). The first non-empty field found will be used. Separate property aliases with a comma (,)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("fieldsForOGTitle")]
		public string FieldsForOgtitle => this.Value<string>("fieldsForOGTitle");

		///<summary>
		/// Font: Enter a Google Fonts URL here to replace the default font. Please be aware that this will result in some CSS stylesheets to be loaded uncompressed, possibly affecting performance.  We suggest you use this functionality only as a tool for previewing font changes.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("font")]
		public string Font => this.Value<string>("font");

		///<summary>
		/// Generate Language Meta Tag Automatically: Check this box to generate the "language" meta tag automatically for all pages that do not have a language meta tag explicitly set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("generateLanguageMetaTagAutomatically")]
		public bool GenerateLanguageMetaTagAutomatically => this.Value<bool>("generateLanguageMetaTagAutomatically");

		///<summary>
		/// Generate url Meta Tag Automatically: Check this box to generate the "url" meta tag automatically for all pages that do not have a url meta tag explicitly set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("generateUrlMetaTagAutomatically")]
		public bool GenerateUrlMetaTagAutomatically => this.Value<bool>("generateUrlMetaTagAutomatically");

		///<summary>
		/// Loading Animation: Check to enable a loading animation while a page is loaded
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("loadingAnimation")]
		public bool LoadingAnimation => this.Value<bool>("loadingAnimation");

		///<summary>
		/// Logo: The site logo to be used on all pages
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("logo")]
		public IPublishedContent Logo => this.Value<IPublishedContent>("logo");

		///<summary>
		/// Mailchimp Api Key: You can use this field to enter your Mailchimp API key or, if you need this info to be more secure, you can alternatively defined it in your web.config file.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("mailchimpApiKey")]
		public string MailchimpApiKey => this.Value<string>("mailchimpApiKey");

		///<summary>
		/// Mailchimp List ID: The ID of the list you want new subscribers to be added to
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("mailchimpListID")]
		public string MailchimpListID => this.Value<string>("mailchimpListID");

		///<summary>
		/// Site name: The site name is essentially the browser title for the home page. This will also be appended as a suffix to all other pages if you check the box below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("siteName")]
		public string SiteName => this.Value<string>("siteName");

		///<summary>
		/// Type if OG Tag Empty: Enter the default OG type value when the type field is left empty.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("typeIfOGTagEmpty")]
		public string TypeIfOgtagEmpty => this.Value<string>("typeIfOGTagEmpty");

		///<summary>
		/// Use Image from Default Language If Empty: Check this to first attempt to use the image from the default site's language if the site is multilingual (with variants). If that image is also empty, then the policy defined above will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useImageFromDefaultLanguage")]
		public bool UseImageFromDefaultLanguage => this.Value<bool>("useImageFromDefaultLanguage");
	}

	/// <summary>(C) Login Page</summary>
	[PublishedModel("configLoginPage")]
	public partial class ConfigLoginPage : PublishedContentModel, IAbstractConfigNode
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "configLoginPage";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ConfigLoginPage, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public ConfigLoginPage(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Background Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backgroundImage")]
		public IPublishedContent BackgroundImage => this.Value<IPublishedContent>("backgroundImage");

		///<summary>
		/// Sunday's Message
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("greeting0")]
		public string Greeting0 => this.Value<string>("greeting0");

		///<summary>
		/// Monday's Message
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("greeting1")]
		public string Greeting1 => this.Value<string>("greeting1");

		///<summary>
		/// Tuesday's Message
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("greeting2")]
		public string Greeting2 => this.Value<string>("greeting2");

		///<summary>
		/// Wednesday's Message
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("greeting3")]
		public string Greeting3 => this.Value<string>("greeting3");

		///<summary>
		/// Thursday's Message
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("greeting4")]
		public string Greeting4 => this.Value<string>("greeting4");

		///<summary>
		/// Friday's Message
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("greeting5")]
		public string Greeting5 => this.Value<string>("greeting5");

		///<summary>
		/// Saturday's Message
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("greeting6")]
		public string Greeting6 => this.Value<string>("greeting6");

		///<summary>
		/// Update Umbraco Settings: Check this to update Umbraco Settings after publishing (will restart the application). Changes you do here will not be reflected in Umbraco's login screen until you check this box.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("updateUmbracoSettings")]
		public bool UpdateUmbracoSettings => this.Value<bool>("updateUmbracoSettings");
	}

	/// <summary>(C) Script Settings</summary>
	[PublishedModel("configScriptSettings")]
	public partial class ConfigScriptSettings : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "configScriptSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ConfigScriptSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public ConfigScriptSettings(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Scripts after Body start: Any scripts you put here go immediately after the starting BODY tag
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("scriptAfterBodyStart")]
		public IEnumerable<NcScriptItem> ScriptAfterBodyStart => this.Value<IEnumerable<NcScriptItem>>("scriptAfterBodyStart");

		///<summary>
		/// Scripts before Body end: Any scripts you put here go before the closing BODY tag
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("scriptBeforeBodyEnd")]
		public IEnumerable<NcScriptItem> ScriptBeforeBodyEnd => this.Value<IEnumerable<NcScriptItem>>("scriptBeforeBodyEnd");

		///<summary>
		/// Scripts in Head element: Any scripts you put here go inside the HEAD element of the page
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("scriptInHeadElement")]
		public IEnumerable<NcScriptItem> ScriptInHeadElement => this.Value<IEnumerable<NcScriptItem>>("scriptInHeadElement");
	}

	/// <summary>(C) Social Links</summary>
	[PublishedModel("configSocialLinks")]
	public partial class ConfigSocialLinks : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "configSocialLinks";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ConfigSocialLinks, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public ConfigSocialLinks(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public IEnumerable<NcSocialLink> Items => this.Value<IEnumerable<NcSocialLink>>("items");
	}

	// Mixin Content Type with alias "abstractPage"
	/// <summary>(Common) Abstract Page</summary>
	public partial interface IAbstractPage : IPublishedContent
	{
		/// <summary>Alternate Breadcrumb Page Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string AltTitleBreadcrumb { get; }

		/// <summary>Alternate Internal Page Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string AltTitleInternal { get; }

		/// <summary>Alternate Page Title for Menus</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string AltTitleMenu { get; }

		/// <summary>Browser Title Override</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string BrowserTitleOverride { get; }

		/// <summary>Code After Body Start</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string CodeAfterBodyStart { get; }

		/// <summary>Code Before Body End</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string CodeBeforeBodyEnd { get; }

		/// <summary>Code in Head Element</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string CodeInHeadElement { get; }

		/// <summary>Hide from Footer</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool HideFromFooter { get; }

		/// <summary>Hide from Search Results</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool HideFromSearchResults { get; }

		/// <summary>Hide in Sitemap</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool HideInSitemap { get; }

		/// <summary>Hide Whole Hierarchy from Search Results</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool HideWholeHierarchyFromSearhResults { get; }

		/// <summary>Hide Whole Hierarchy from Sitemap</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool HideWholeHierarchyFromSitemap { get; }

		/// <summary>Title Override</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string OverrideTitle { get; }

		/// <summary>Priority</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		decimal Priority { get; }

		/// <summary>Redirect</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		IEnumerable<IPublishedElement> Redirect { get; }

		/// <summary>Hide from Menu</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool UmbracoNaviHide { get; }

		/// <summary>Alternate URL(s)</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string UmbracoUrlAlias { get; }

		/// <summary>URL part substitution</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string UmbracoUrlName { get; }
	}

	/// <summary>(Common) Abstract Page</summary>
	[PublishedModel("abstractPage")]
	public partial class AbstractPage : PublishedContentModel, IAbstractPage
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractPage";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractPage, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractPage(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => GetAltTitleBreadcrumb(this);

		/// <summary>Static getter for Alternate Breadcrumb Page Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetAltTitleBreadcrumb(IAbstractPage that) => that.Value<string>("altTitleBreadcrumb");

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => GetAltTitleInternal(this);

		/// <summary>Static getter for Alternate Internal Page Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetAltTitleInternal(IAbstractPage that) => that.Value<string>("altTitleInternal");

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => GetAltTitleMenu(this);

		/// <summary>Static getter for Alternate Page Title for Menus</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetAltTitleMenu(IAbstractPage that) => that.Value<string>("altTitleMenu");

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => GetBrowserTitleOverride(this);

		/// <summary>Static getter for Browser Title Override</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetBrowserTitleOverride(IAbstractPage that) => that.Value<string>("browserTitleOverride");

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => GetCodeAfterBodyStart(this);

		/// <summary>Static getter for Code After Body Start</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetCodeAfterBodyStart(IAbstractPage that) => that.Value<string>("codeAfterBodyStart");

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => GetCodeBeforeBodyEnd(this);

		/// <summary>Static getter for Code Before Body End</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetCodeBeforeBodyEnd(IAbstractPage that) => that.Value<string>("codeBeforeBodyEnd");

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => GetCodeInHeadElement(this);

		/// <summary>Static getter for Code in Head Element</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetCodeInHeadElement(IAbstractPage that) => that.Value<string>("codeInHeadElement");

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => GetHideFromFooter(this);

		/// <summary>Static getter for Hide from Footer</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetHideFromFooter(IAbstractPage that) => that.Value<bool>("hideFromFooter");

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => GetHideFromSearchResults(this);

		/// <summary>Static getter for Hide from Search Results</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetHideFromSearchResults(IAbstractPage that) => that.Value<bool>("hideFromSearchResults");

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => GetHideInSitemap(this);

		/// <summary>Static getter for Hide in Sitemap</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetHideInSitemap(IAbstractPage that) => that.Value<bool>("hideInSitemap");

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => GetHideWholeHierarchyFromSearhResults(this);

		/// <summary>Static getter for Hide Whole Hierarchy from Search Results</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetHideWholeHierarchyFromSearhResults(IAbstractPage that) => that.Value<bool>("hideWholeHierarchyFromSearhResults");

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => GetHideWholeHierarchyFromSitemap(this);

		/// <summary>Static getter for Hide Whole Hierarchy from Sitemap</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetHideWholeHierarchyFromSitemap(IAbstractPage that) => that.Value<bool>("hideWholeHierarchyFromSitemap");

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => GetOverrideTitle(this);

		/// <summary>Static getter for Title Override</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetOverrideTitle(IAbstractPage that) => that.Value<string>("overrideTitle");

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => GetPriority(this);

		/// <summary>Static getter for Priority</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static decimal GetPriority(IAbstractPage that) => that.Value<decimal>("priority");

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => GetRedirect(this);

		/// <summary>Static getter for Redirect</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IEnumerable<IPublishedElement> GetRedirect(IAbstractPage that) => that.Value<IEnumerable<IPublishedElement>>("redirect");

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => GetUmbracoNaviHide(this);

		/// <summary>Static getter for Hide from Menu</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetUmbracoNaviHide(IAbstractPage that) => that.Value<bool>("umbracoNaviHide");

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => GetUmbracoUrlAlias(this);

		/// <summary>Static getter for Alternate URL(s)</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetUmbracoUrlAlias(IAbstractPage that) => that.Value<string>("umbracoUrlAlias");

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => GetUmbracoUrlName(this);

		/// <summary>Static getter for URL part substitution</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetUmbracoUrlName(IAbstractPage that) => that.Value<string>("umbracoUrlName");
	}

	// Mixin Content Type with alias "abstractPageBackgroundImage"
	/// <summary>Abstract Page Background Image</summary>
	public partial interface IAbstractPageBackgroundImage : IPublishedContent
	{
		/// <summary>Apply Background Image to Sub Pages</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool ApplyBackgroundImageToSubPages { get; }

		/// <summary>Summary</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string BackgroundImageSummary { get; }

		/// <summary>Hide Breadcrumb</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool HideBreadcrumb { get; }

		/// <summary>Keep Sub Page Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool KeepSubPageTitle { get; }

		/// <summary>Large height</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool LargeHeight { get; }

		/// <summary>Overlay</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		decimal Overlay { get; }

		/// <summary>Background Image</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		IPublishedContent PageBackgroundImage { get; }

		/// <summary>Use Light Text Color</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool UseLightTextColor { get; }
	}

	/// <summary>Abstract Page Background Image</summary>
	[PublishedModel("abstractPageBackgroundImage")]
	public partial class AbstractPageBackgroundImage : PublishedContentModel, IAbstractPageBackgroundImage
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractPageBackgroundImage";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractPageBackgroundImage, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractPageBackgroundImage(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Apply Background Image to Sub Pages: Applies the setting to sub pages, unless they have it explicitly set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyBackgroundImageToSubPages")]
		public bool ApplyBackgroundImageToSubPages => GetApplyBackgroundImageToSubPages(this);

		/// <summary>Static getter for Apply Background Image to Sub Pages</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetApplyBackgroundImageToSubPages(IAbstractPageBackgroundImage that) => that.Value<bool>("applyBackgroundImageToSubPages");

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backgroundImageSummary")]
		public string BackgroundImageSummary => GetBackgroundImageSummary(this);

		/// <summary>Static getter for Summary</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetBackgroundImageSummary(IAbstractPageBackgroundImage that) => that.Value<string>("backgroundImageSummary");

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb => GetHideBreadcrumb(this);

		/// <summary>Static getter for Hide Breadcrumb</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetHideBreadcrumb(IAbstractPageBackgroundImage that) => that.Value<bool>("hideBreadcrumb");

		///<summary>
		/// Keep Sub Page Title: Check this when applying a background image to sub pages in order to retain the sub page's title. If you leave it unchecked, the page will also inherit the title from the page it gets the image from.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("keepSubPageTitle")]
		public bool KeepSubPageTitle => GetKeepSubPageTitle(this);

		/// <summary>Static getter for Keep Sub Page Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetKeepSubPageTitle(IAbstractPageBackgroundImage that) => that.Value<bool>("keepSubPageTitle");

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight => GetLargeHeight(this);

		/// <summary>Static getter for Large height</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetLargeHeight(IAbstractPageBackgroundImage that) => that.Value<bool>("largeHeight");

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => GetOverlay(this);

		/// <summary>Static getter for Overlay</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static decimal GetOverlay(IAbstractPageBackgroundImage that) => that.Value<decimal>("overlay");

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage => GetPageBackgroundImage(this);

		/// <summary>Static getter for Background Image</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedContent GetPageBackgroundImage(IAbstractPageBackgroundImage that) => that.Value<IPublishedContent>("pageBackgroundImage");

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => GetUseLightTextColor(this);

		/// <summary>Static getter for Use Light Text Color</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetUseLightTextColor(IAbstractPageBackgroundImage that) => that.Value<bool>("useLightTextColor");
	}

	// Mixin Content Type with alias "abstractOpenGraph"
	/// <summary>(Common) Abstract OpenGraph</summary>
	public partial interface IAbstractOpenGraph : IPublishedContent
	{
		/// <summary>Apply to Sub Pages</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		IEnumerable<string> ApplyToSubPages { get; }

		/// <summary>Meta Description</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string MetaDescription { get; }

		/// <summary>Meta Keywords</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string MetaKeywords { get; }

		/// <summary>Meta Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string MetaTitle { get; }

		/// <summary>OG Description</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string OgDescription { get; }

		/// <summary>OG Image</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		IPublishedContent OgImage { get; }

		/// <summary>OG Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string OgTitle { get; }

		/// <summary>OG Type</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string OgType { get; }

		/// <summary>Other Http-Equiv Meta Tags</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags { get; }

		/// <summary>Other Meta Tags</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		IEnumerable<NcMetaTagItem> OtherMetaTags { get; }

		/// <summary>Other Properties</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		IEnumerable<NcOpenGraphItem> OtherProperties { get; }
	}

	/// <summary>(Common) Abstract OpenGraph</summary>
	[PublishedModel("abstractOpenGraph")]
	public partial class AbstractOpenGraph : PublishedContentModel, IAbstractOpenGraph
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractOpenGraph";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractOpenGraph, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractOpenGraph(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => GetApplyToSubPages(this);

		/// <summary>Static getter for Apply to Sub Pages</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IEnumerable<string> GetApplyToSubPages(IAbstractOpenGraph that) => that.Value<IEnumerable<string>>("applyToSubPages");

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => GetMetaDescription(this);

		/// <summary>Static getter for Meta Description</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetMetaDescription(IAbstractOpenGraph that) => that.Value<string>("metaDescription");

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => GetMetaKeywords(this);

		/// <summary>Static getter for Meta Keywords</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetMetaKeywords(IAbstractOpenGraph that) => that.Value<string>("metaKeywords");

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => GetMetaTitle(this);

		/// <summary>Static getter for Meta Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetMetaTitle(IAbstractOpenGraph that) => that.Value<string>("metaTitle");

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => GetOgDescription(this);

		/// <summary>Static getter for OG Description</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetOgDescription(IAbstractOpenGraph that) => that.Value<string>("ogDescription");

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => GetOgImage(this);

		/// <summary>Static getter for OG Image</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedContent GetOgImage(IAbstractOpenGraph that) => that.Value<IPublishedContent>("ogImage");

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => GetOgTitle(this);

		/// <summary>Static getter for OG Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetOgTitle(IAbstractOpenGraph that) => that.Value<string>("ogTitle");

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => GetOgType(this);

		/// <summary>Static getter for OG Type</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetOgType(IAbstractOpenGraph that) => that.Value<string>("ogType");

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => GetOtherHttpEquivMetaTags(this);

		/// <summary>Static getter for Other Http-Equiv Meta Tags</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IEnumerable<NcMetaTagItem> GetOtherHttpEquivMetaTags(IAbstractOpenGraph that) => that.Value<IEnumerable<NcMetaTagItem>>("otherHttpEquivMetaTags");

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => GetOtherMetaTags(this);

		/// <summary>Static getter for Other Meta Tags</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IEnumerable<NcMetaTagItem> GetOtherMetaTags(IAbstractOpenGraph that) => that.Value<IEnumerable<NcMetaTagItem>>("otherMetaTags");

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => GetOtherProperties(this);

		/// <summary>Static getter for Other Properties</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IEnumerable<NcOpenGraphItem> GetOtherProperties(IAbstractOpenGraph that) => that.Value<IEnumerable<NcOpenGraphItem>>("otherProperties");
	}

	// Mixin Content Type with alias "abstractPageSections"
	/// <summary>(Common) Abstract Page Sections</summary>
	public partial interface IAbstractPageSections : IPublishedContent
	{
		/// <summary>Intro Section</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		Umbraco.Core.Models.Blocks.BlockListModel IntroSection { get; }

		/// <summary>Sections</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		Umbraco.Core.Models.Blocks.BlockListModel Sections { get; }
	}

	/// <summary>(Common) Abstract Page Sections</summary>
	[PublishedModel("abstractPageSections")]
	public partial class AbstractPageSections : PublishedContentModel, IAbstractPageSections
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractPageSections";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractPageSections, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractPageSections(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Intro Section
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("introSection")]
		public Umbraco.Core.Models.Blocks.BlockListModel IntroSection => GetIntroSection(this);

		/// <summary>Static getter for Intro Section</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static Umbraco.Core.Models.Blocks.BlockListModel GetIntroSection(IAbstractPageSections that) => that.Value<Umbraco.Core.Models.Blocks.BlockListModel>("introSection");

		///<summary>
		/// Sections
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sections")]
		public Umbraco.Core.Models.Blocks.BlockListModel Sections => GetSections(this);

		/// <summary>Static getter for Sections</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static Umbraco.Core.Models.Blocks.BlockListModel GetSections(IAbstractPageSections that) => that.Value<Umbraco.Core.Models.Blocks.BlockListModel>("sections");
	}

	/// <summary>404 Page</summary>
	[PublishedModel("page404")]
	public partial class Page404 : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageBackgroundImage, IAbstractPageSections
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "page404";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Page404, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public Page404(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => AbstractOpenGraph.GetApplyToSubPages(this);

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => AbstractOpenGraph.GetMetaDescription(this);

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => AbstractOpenGraph.GetMetaKeywords(this);

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => AbstractOpenGraph.GetMetaTitle(this);

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => AbstractOpenGraph.GetOgDescription(this);

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => AbstractOpenGraph.GetOgImage(this);

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => AbstractOpenGraph.GetOgTitle(this);

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => AbstractOpenGraph.GetOgType(this);

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => AbstractOpenGraph.GetOtherHttpEquivMetaTags(this);

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => AbstractOpenGraph.GetOtherMetaTags(this);

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => AbstractOpenGraph.GetOtherProperties(this);

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => AbstractPage.GetAltTitleBreadcrumb(this);

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => AbstractPage.GetAltTitleInternal(this);

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => AbstractPage.GetAltTitleMenu(this);

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => AbstractPage.GetBrowserTitleOverride(this);

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => AbstractPage.GetCodeAfterBodyStart(this);

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => AbstractPage.GetCodeBeforeBodyEnd(this);

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => AbstractPage.GetCodeInHeadElement(this);

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => AbstractPage.GetHideFromFooter(this);

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => AbstractPage.GetHideFromSearchResults(this);

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => AbstractPage.GetHideInSitemap(this);

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => AbstractPage.GetHideWholeHierarchyFromSearhResults(this);

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => AbstractPage.GetHideWholeHierarchyFromSitemap(this);

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => AbstractPage.GetOverrideTitle(this);

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => AbstractPage.GetPriority(this);

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => AbstractPage.GetRedirect(this);

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => AbstractPage.GetUmbracoNaviHide(this);

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => AbstractPage.GetUmbracoUrlAlias(this);

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => AbstractPage.GetUmbracoUrlName(this);

		///<summary>
		/// Apply Background Image to Sub Pages: Applies the setting to sub pages, unless they have it explicitly set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyBackgroundImageToSubPages")]
		public bool ApplyBackgroundImageToSubPages => AbstractPageBackgroundImage.GetApplyBackgroundImageToSubPages(this);

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backgroundImageSummary")]
		public string BackgroundImageSummary => AbstractPageBackgroundImage.GetBackgroundImageSummary(this);

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb => AbstractPageBackgroundImage.GetHideBreadcrumb(this);

		///<summary>
		/// Keep Sub Page Title: Check this when applying a background image to sub pages in order to retain the sub page's title. If you leave it unchecked, the page will also inherit the title from the page it gets the image from.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("keepSubPageTitle")]
		public bool KeepSubPageTitle => AbstractPageBackgroundImage.GetKeepSubPageTitle(this);

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight => AbstractPageBackgroundImage.GetLargeHeight(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractPageBackgroundImage.GetOverlay(this);

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage => AbstractPageBackgroundImage.GetPageBackgroundImage(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractPageBackgroundImage.GetUseLightTextColor(this);

		///<summary>
		/// Intro Section
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("introSection")]
		public Umbraco.Core.Models.Blocks.BlockListModel IntroSection => AbstractPageSections.GetIntroSection(this);

		///<summary>
		/// Sections
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sections")]
		public Umbraco.Core.Models.Blocks.BlockListModel Sections => AbstractPageSections.GetSections(this);
	}

	/// <summary>(Common) Abstract Content Page</summary>
	[PublishedModel("abstractContentPage")]
	public partial class AbstractContentPage : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractContentPage";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractContentPage, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractContentPage(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Hide Image: Image will continue to be used in lists, but it will not be displayed inside the page. Useful when you need to display a gallery instead.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideImage")]
		public bool HideImage => this.Value<bool>("hideImage");

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IEnumerable<IPublishedContent> Image => this.Value<IEnumerable<IPublishedContent>>("image");

		///<summary>
		/// Intro Text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("introText")]
		public IHtmlString IntroText => this.Value<IHtmlString>("introText");

		///<summary>
		/// Photo Gallery
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("photoGallery")]
		public IEnumerable<NcLink> PhotoGallery => this.Value<IEnumerable<NcLink>>("photoGallery");

		///<summary>
		/// Related Articles
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("relatedArticles")]
		public IPublishedContent RelatedArticles => this.Value<IPublishedContent>("relatedArticles");

		///<summary>
		/// Related Events
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("relatedEvents")]
		public IPublishedContent RelatedEvents => this.Value<IPublishedContent>("relatedEvents");

		///<summary>
		/// Show Department Signature: Pick a location where the department signature will be displayed. If you don't select an option, the default behavior will be applied (as defined in global settings). If the page is not under a department, then this option is ignored.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showDepartmentSignature")]
		public IEnumerable<string> ShowDepartmentSignature => this.Value<IEnumerable<string>>("showDepartmentSignature");

		///<summary>
		/// Subtitle
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("subtitle")]
		public string Subtitle => this.Value<string>("subtitle");

		///<summary>
		/// Text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("text")]
		public IHtmlString Text => this.Value<IHtmlString>("text");

		///<summary>
		/// Video Gallery
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("videoGallery")]
		public IEnumerable<NcLink> VideoGallery => this.Value<IEnumerable<NcLink>>("videoGallery");
	}

	/// <summary>(Common) Abstract Hero Banner</summary>
	[PublishedModel("abstractHeroBanner")]
	public partial class AbstractHeroBanner : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractHeroBanner";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractHeroBanner, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractHeroBanner(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Image: The main image. Please use images with a width of at least 1200px.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("heroBannerImage")]
		public IPublishedContent HeroBannerImage => this.Value<IPublishedContent>("heroBannerImage");

		///<summary>
		/// Subtitle: Subsequent lines on the hero banner title. These lines will be displayed using a different color that that of the first line. On the homepage subtitle lines are animated. Separate each line with a pipe symbol - |.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("heroBannerSubtitle")]
		public string HeroBannerSubtitle => this.Value<string>("heroBannerSubtitle");

		///<summary>
		/// Title: The first line of the hero banner title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("heroBannerTitle")]
		public string HeroBannerTitle => this.Value<string>("heroBannerTitle");

		///<summary>
		/// Video Desktop: Choose an .mp4 video file for desktop view on homepage (not currently used).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("videoDesktop")]
		public IPublishedContent VideoDesktop => this.Value<IPublishedContent>("videoDesktop");

		///<summary>
		/// Video Mobile: Choose an .mp4 video file for mobile view  on homepage (not currently used).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("videoMobile")]
		public IPublishedContent VideoMobile => this.Value<IPublishedContent>("videoMobile");
	}

	// Mixin Content Type with alias "abstractIntroSectionBlock"
	/// <summary>(Common) Abstract Intro Section Block</summary>
	public partial interface IAbstractIntroSectionBlock : IPublishedElement
	{
		/// <summary>Light Top Menu</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool LightTopMenu { get; }
	}

	/// <summary>(Common) Abstract Intro Section Block</summary>
	[PublishedModel("abstractIntroSectionBlock")]
	public partial class AbstractIntroSectionBlock : PublishedElementModel, IAbstractIntroSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractIntroSectionBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractIntroSectionBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractIntroSectionBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Light Top Menu: Enable this to have menu color in white
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("lightTopMenu")]
		public bool LightTopMenu => GetLightTopMenu(this);

		/// <summary>Static getter for Light Top Menu</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetLightTopMenu(IAbstractIntroSectionBlock that) => that.Value<bool>("lightTopMenu");
	}

	// Mixin Content Type with alias "abstractSectionBlock"
	/// <summary>(Common) Abstract Section Block</summary>
	public partial interface IAbstractSectionBlock : IPublishedElement
	{
		/// <summary>Disable Section</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool Disabled { get; }

		/// <summary>Section Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string SectionTitle { get; }
	}

	/// <summary>(Common) Abstract Section Block</summary>
	[PublishedModel("abstractSectionBlock")]
	public partial class AbstractSectionBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractSectionBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractSectionBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractSectionBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => GetDisabled(this);

		/// <summary>Static getter for Disable Section</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetDisabled(IAbstractSectionBlock that) => that.Value<bool>("disabled");

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => GetSectionTitle(this);

		/// <summary>Static getter for Section Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetSectionTitle(IAbstractSectionBlock that) => that.Value<string>("sectionTitle");
	}

	// Mixin Content Type with alias "abstractNcLinkItem"
	/// <summary>(Common) AbstractNcLinkItem</summary>
	public partial interface IAbstractNcLinkItem : IPublishedElement
	{
		/// <summary>ALT text</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string AltText { get; }

		/// <summary>Caption</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string Caption { get; }

		/// <summary>Open Link in New Window</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool OpenLinkInNewWindow { get; }

		/// <summary>Other Attributes</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		IEnumerable<NcNameValuePairItem> OtherAttributes { get; }

		/// <summary>TITLE text</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string TitleText { get; }

		/// <summary>Use Caption as ALT and TITLE values</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool UseCaptionForAltAndTitle { get; }
	}

	/// <summary>(Common) AbstractNcLinkItem</summary>
	[PublishedModel("abstractNcLinkItem")]
	public partial class AbstractNcLinkItem : PublishedElementModel, IAbstractNcLinkItem
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractNcLinkItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractNcLinkItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractNcLinkItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// ALT text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altText")]
		public string AltText => GetAltText(this);

		/// <summary>Static getter for ALT text</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetAltText(IAbstractNcLinkItem that) => that.Value<string>("altText");

		///<summary>
		/// Caption: If you don't fill this field, the element will not be displayed at all.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("caption")]
		public string Caption => GetCaption(this);

		/// <summary>Static getter for Caption</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetCaption(IAbstractNcLinkItem that) => that.Value<string>("caption");

		///<summary>
		/// Open Link in New Window
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("openLinkInNewWindow")]
		public bool OpenLinkInNewWindow => GetOpenLinkInNewWindow(this);

		/// <summary>Static getter for Open Link in New Window</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetOpenLinkInNewWindow(IAbstractNcLinkItem that) => that.Value<bool>("openLinkInNewWindow");

		///<summary>
		/// Other Attributes
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherAttributes")]
		public IEnumerable<NcNameValuePairItem> OtherAttributes => GetOtherAttributes(this);

		/// <summary>Static getter for Other Attributes</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IEnumerable<NcNameValuePairItem> GetOtherAttributes(IAbstractNcLinkItem that) => that.Value<IEnumerable<NcNameValuePairItem>>("otherAttributes");

		///<summary>
		/// TITLE text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleText")]
		public string TitleText => GetTitleText(this);

		/// <summary>Static getter for TITLE text</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetTitleText(IAbstractNcLinkItem that) => that.Value<string>("titleText");

		///<summary>
		/// Use Caption as ALT and TITLE values: Check this box if you want the caption field's value to be used in the ALT and TITLE attributes as well if their respective fields are left empty.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useCaptionForAltAndTitle")]
		public bool UseCaptionForAltAndTitle => GetUseCaptionForAltAndTitle(this);

		/// <summary>Static getter for Use Caption as ALT and TITLE values</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetUseCaptionForAltAndTitle(IAbstractNcLinkItem that) => that.Value<bool>("useCaptionForAltAndTitle");
	}

	// Mixin Content Type with alias "AbstractSocialLinks"
	/// <summary>(Common) AbstractSocialLinks</summary>
	public partial interface IAbstractSocialLinks : IPublishedContent
	{
		/// <summary>Social Links</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		IEnumerable<NcSocialLink> SocialLinks { get; }
	}

	/// <summary>(Common) AbstractSocialLinks</summary>
	[PublishedModel("AbstractSocialLinks")]
	public partial class AbstractSocialLinks : PublishedContentModel, IAbstractSocialLinks
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "AbstractSocialLinks";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractSocialLinks, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractSocialLinks(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Social Links: Valid style names (fontawesome): https://fontawesome.com/v4.7.0/icons/ (example: facebook, instagram, linkedin, youtube, github, vimeo, etc.)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("socialLinks")]
		public IEnumerable<NcSocialLink> SocialLinks => GetSocialLinks(this);

		/// <summary>Static getter for Social Links</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IEnumerable<NcSocialLink> GetSocialLinks(IAbstractSocialLinks that) => that.Value<IEnumerable<NcSocialLink>>("socialLinks");
	}

	/// <summary>Categories Folder</summary>
	[PublishedModel("folderGenericCategories")]
	public partial class FolderGenericCategories : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "folderGenericCategories";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderGenericCategories, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public FolderGenericCategories(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>Category Item</summary>
	[PublishedModel("dGenericCategoryItem")]
	public partial class DGenericCategoryItem : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "dGenericCategoryItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DGenericCategoryItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public DGenericCategoryItem(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>Content Page</summary>
	[PublishedModel("pageContent")]
	public partial class PageContent : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageBackgroundImage, IAbstractPageSections
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pageContent";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageContent, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PageContent(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => AbstractOpenGraph.GetApplyToSubPages(this);

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => AbstractOpenGraph.GetMetaDescription(this);

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => AbstractOpenGraph.GetMetaKeywords(this);

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => AbstractOpenGraph.GetMetaTitle(this);

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => AbstractOpenGraph.GetOgDescription(this);

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => AbstractOpenGraph.GetOgImage(this);

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => AbstractOpenGraph.GetOgTitle(this);

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => AbstractOpenGraph.GetOgType(this);

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => AbstractOpenGraph.GetOtherHttpEquivMetaTags(this);

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => AbstractOpenGraph.GetOtherMetaTags(this);

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => AbstractOpenGraph.GetOtherProperties(this);

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => AbstractPage.GetAltTitleBreadcrumb(this);

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => AbstractPage.GetAltTitleInternal(this);

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => AbstractPage.GetAltTitleMenu(this);

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => AbstractPage.GetBrowserTitleOverride(this);

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => AbstractPage.GetCodeAfterBodyStart(this);

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => AbstractPage.GetCodeBeforeBodyEnd(this);

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => AbstractPage.GetCodeInHeadElement(this);

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => AbstractPage.GetHideFromFooter(this);

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => AbstractPage.GetHideFromSearchResults(this);

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => AbstractPage.GetHideInSitemap(this);

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => AbstractPage.GetHideWholeHierarchyFromSearhResults(this);

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => AbstractPage.GetHideWholeHierarchyFromSitemap(this);

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => AbstractPage.GetOverrideTitle(this);

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => AbstractPage.GetPriority(this);

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => AbstractPage.GetRedirect(this);

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => AbstractPage.GetUmbracoNaviHide(this);

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => AbstractPage.GetUmbracoUrlAlias(this);

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => AbstractPage.GetUmbracoUrlName(this);

		///<summary>
		/// Apply Background Image to Sub Pages: Applies the setting to sub pages, unless they have it explicitly set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyBackgroundImageToSubPages")]
		public bool ApplyBackgroundImageToSubPages => AbstractPageBackgroundImage.GetApplyBackgroundImageToSubPages(this);

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backgroundImageSummary")]
		public string BackgroundImageSummary => AbstractPageBackgroundImage.GetBackgroundImageSummary(this);

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb => AbstractPageBackgroundImage.GetHideBreadcrumb(this);

		///<summary>
		/// Keep Sub Page Title: Check this when applying a background image to sub pages in order to retain the sub page's title. If you leave it unchecked, the page will also inherit the title from the page it gets the image from.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("keepSubPageTitle")]
		public bool KeepSubPageTitle => AbstractPageBackgroundImage.GetKeepSubPageTitle(this);

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight => AbstractPageBackgroundImage.GetLargeHeight(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractPageBackgroundImage.GetOverlay(this);

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage => AbstractPageBackgroundImage.GetPageBackgroundImage(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractPageBackgroundImage.GetUseLightTextColor(this);

		///<summary>
		/// Intro Section
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("introSection")]
		public Umbraco.Core.Models.Blocks.BlockListModel IntroSection => AbstractPageSections.GetIntroSection(this);

		///<summary>
		/// Sections
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sections")]
		public Umbraco.Core.Models.Blocks.BlockListModel Sections => AbstractPageSections.GetSections(this);
	}

	/// <summary>Cookie Preferences Page</summary>
	[PublishedModel("pageCookiePreferences")]
	public partial class PageCookiePreferences : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageBackgroundImage, IAbstractPageSections
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pageCookiePreferences";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageCookiePreferences, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PageCookiePreferences(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Cookie Groups
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("cookieGroups")]
		public IEnumerable<NcCookieGroup> CookieGroups => this.Value<IEnumerable<NcCookieGroup>>("cookieGroups");

		///<summary>
		/// Reset Cookie Button Color
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("resetCookieButtonColor")]
		public string ResetCookieButtonColor => this.Value<string>("resetCookieButtonColor");

		///<summary>
		/// Reset Cookie Button Text Color
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("resetCookieButtonTextColor")]
		public string ResetCookieButtonTextColor => this.Value<string>("resetCookieButtonTextColor");

		///<summary>
		/// Reset Cookies Button Text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("resetCookiesButtonText")]
		public string ResetCookiesButtonText => this.Value<string>("resetCookiesButtonText");

		///<summary>
		/// Show Reset Cookies Button
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showResetCookiesButton")]
		public bool ShowResetCookiesButton => this.Value<bool>("showResetCookiesButton");

		///<summary>
		/// Wide Text: Check this box to make the section occupy more horizontal space.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("wideText")]
		public bool WideText => this.Value<bool>("wideText");

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => AbstractOpenGraph.GetApplyToSubPages(this);

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => AbstractOpenGraph.GetMetaDescription(this);

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => AbstractOpenGraph.GetMetaKeywords(this);

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => AbstractOpenGraph.GetMetaTitle(this);

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => AbstractOpenGraph.GetOgDescription(this);

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => AbstractOpenGraph.GetOgImage(this);

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => AbstractOpenGraph.GetOgTitle(this);

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => AbstractOpenGraph.GetOgType(this);

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => AbstractOpenGraph.GetOtherHttpEquivMetaTags(this);

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => AbstractOpenGraph.GetOtherMetaTags(this);

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => AbstractOpenGraph.GetOtherProperties(this);

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => AbstractPage.GetAltTitleBreadcrumb(this);

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => AbstractPage.GetAltTitleInternal(this);

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => AbstractPage.GetAltTitleMenu(this);

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => AbstractPage.GetBrowserTitleOverride(this);

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => AbstractPage.GetCodeAfterBodyStart(this);

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => AbstractPage.GetCodeBeforeBodyEnd(this);

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => AbstractPage.GetCodeInHeadElement(this);

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => AbstractPage.GetHideFromFooter(this);

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => AbstractPage.GetHideFromSearchResults(this);

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => AbstractPage.GetHideInSitemap(this);

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => AbstractPage.GetHideWholeHierarchyFromSearhResults(this);

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => AbstractPage.GetHideWholeHierarchyFromSitemap(this);

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => AbstractPage.GetOverrideTitle(this);

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => AbstractPage.GetPriority(this);

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => AbstractPage.GetRedirect(this);

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => AbstractPage.GetUmbracoNaviHide(this);

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => AbstractPage.GetUmbracoUrlAlias(this);

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => AbstractPage.GetUmbracoUrlName(this);

		///<summary>
		/// Apply Background Image to Sub Pages: Applies the setting to sub pages, unless they have it explicitly set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyBackgroundImageToSubPages")]
		public bool ApplyBackgroundImageToSubPages => AbstractPageBackgroundImage.GetApplyBackgroundImageToSubPages(this);

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backgroundImageSummary")]
		public string BackgroundImageSummary => AbstractPageBackgroundImage.GetBackgroundImageSummary(this);

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb => AbstractPageBackgroundImage.GetHideBreadcrumb(this);

		///<summary>
		/// Keep Sub Page Title: Check this when applying a background image to sub pages in order to retain the sub page's title. If you leave it unchecked, the page will also inherit the title from the page it gets the image from.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("keepSubPageTitle")]
		public bool KeepSubPageTitle => AbstractPageBackgroundImage.GetKeepSubPageTitle(this);

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight => AbstractPageBackgroundImage.GetLargeHeight(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractPageBackgroundImage.GetOverlay(this);

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage => AbstractPageBackgroundImage.GetPageBackgroundImage(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractPageBackgroundImage.GetUseLightTextColor(this);

		///<summary>
		/// Intro Section
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("introSection")]
		public Umbraco.Core.Models.Blocks.BlockListModel IntroSection => AbstractPageSections.GetIntroSection(this);

		///<summary>
		/// Sections
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sections")]
		public Umbraco.Core.Models.Blocks.BlockListModel Sections => AbstractPageSections.GetSections(this);
	}

	/// <summary>Home Page</summary>
	[PublishedModel("pageHome")]
	public partial class PageHome : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageSections
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pageHome";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageHome, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PageHome(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => AbstractOpenGraph.GetApplyToSubPages(this);

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => AbstractOpenGraph.GetMetaDescription(this);

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => AbstractOpenGraph.GetMetaKeywords(this);

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => AbstractOpenGraph.GetMetaTitle(this);

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => AbstractOpenGraph.GetOgDescription(this);

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => AbstractOpenGraph.GetOgImage(this);

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => AbstractOpenGraph.GetOgTitle(this);

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => AbstractOpenGraph.GetOgType(this);

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => AbstractOpenGraph.GetOtherHttpEquivMetaTags(this);

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => AbstractOpenGraph.GetOtherMetaTags(this);

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => AbstractOpenGraph.GetOtherProperties(this);

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => AbstractPage.GetAltTitleBreadcrumb(this);

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => AbstractPage.GetAltTitleInternal(this);

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => AbstractPage.GetAltTitleMenu(this);

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => AbstractPage.GetBrowserTitleOverride(this);

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => AbstractPage.GetCodeAfterBodyStart(this);

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => AbstractPage.GetCodeBeforeBodyEnd(this);

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => AbstractPage.GetCodeInHeadElement(this);

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => AbstractPage.GetHideFromFooter(this);

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => AbstractPage.GetHideFromSearchResults(this);

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => AbstractPage.GetHideInSitemap(this);

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => AbstractPage.GetHideWholeHierarchyFromSearhResults(this);

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => AbstractPage.GetHideWholeHierarchyFromSitemap(this);

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => AbstractPage.GetOverrideTitle(this);

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => AbstractPage.GetPriority(this);

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => AbstractPage.GetRedirect(this);

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => AbstractPage.GetUmbracoNaviHide(this);

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => AbstractPage.GetUmbracoUrlAlias(this);

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => AbstractPage.GetUmbracoUrlName(this);

		///<summary>
		/// Intro Section
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("introSection")]
		public Umbraco.Core.Models.Blocks.BlockListModel IntroSection => AbstractPageSections.GetIntroSection(this);

		///<summary>
		/// Sections
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sections")]
		public Umbraco.Core.Models.Blocks.BlockListModel Sections => AbstractPageSections.GetSections(this);
	}

	/// <summary>(Common) Link - External</summary>
	[PublishedModel("ncExternalLinkItem")]
	public partial class NcExternalLinkItem : PublishedElementModel, IAbstractNcLinkItem
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncExternalLinkItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcExternalLinkItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcExternalLinkItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// External Link: If you specify an external link here, any internal link and/or link to file will be ignored.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("externalLink")]
		public string ExternalLink => this.Value<string>("externalLink");

		///<summary>
		/// ALT text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altText")]
		public string AltText => AbstractNcLinkItem.GetAltText(this);

		///<summary>
		/// Caption: If you don't fill this field, the element will not be displayed at all.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("caption")]
		public string Caption => AbstractNcLinkItem.GetCaption(this);

		///<summary>
		/// Open Link in New Window
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("openLinkInNewWindow")]
		public bool OpenLinkInNewWindow => AbstractNcLinkItem.GetOpenLinkInNewWindow(this);

		///<summary>
		/// Other Attributes
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherAttributes")]
		public IEnumerable<NcNameValuePairItem> OtherAttributes => AbstractNcLinkItem.GetOtherAttributes(this);

		///<summary>
		/// TITLE text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleText")]
		public string TitleText => AbstractNcLinkItem.GetTitleText(this);

		///<summary>
		/// Use Caption as ALT and TITLE values: Check this box if you want the caption field's value to be used in the ALT and TITLE attributes as well if their respective fields are left empty.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useCaptionForAltAndTitle")]
		public bool UseCaptionForAltAndTitle => AbstractNcLinkItem.GetUseCaptionForAltAndTitle(this);
	}

	/// <summary>(Common) Link - Internal</summary>
	[PublishedModel("ncInternalLinkItem")]
	public partial class NcInternalLinkItem : PublishedElementModel, IAbstractNcLinkItem
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncInternalLinkItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcInternalLinkItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcInternalLinkItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Internal Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("internalLink")]
		public IPublishedContent InternalLink => this.Value<IPublishedContent>("internalLink");

		///<summary>
		/// Internal Link Anchor: Use this in combination with the internal link to navigate to a specific part of the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("internalLinkAnchor")]
		public string InternalLinkAnchor => this.Value<string>("internalLinkAnchor");

		///<summary>
		/// Internal Link Querystring Parameters: Enter any additional querystring parameters you want to add to the internal link, in the form "a=1&b=2" (without the question mark).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("internalLinkQuerystringParameters")]
		public string InternalLinkQuerystringParameters => this.Value<string>("internalLinkQuerystringParameters");

		///<summary>
		/// ALT text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altText")]
		public string AltText => AbstractNcLinkItem.GetAltText(this);

		///<summary>
		/// Caption: If you don't fill this field, the element will not be displayed at all.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("caption")]
		public string Caption => AbstractNcLinkItem.GetCaption(this);

		///<summary>
		/// Open Link in New Window
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("openLinkInNewWindow")]
		public bool OpenLinkInNewWindow => AbstractNcLinkItem.GetOpenLinkInNewWindow(this);

		///<summary>
		/// Other Attributes
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherAttributes")]
		public IEnumerable<NcNameValuePairItem> OtherAttributes => AbstractNcLinkItem.GetOtherAttributes(this);

		///<summary>
		/// TITLE text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleText")]
		public string TitleText => AbstractNcLinkItem.GetTitleText(this);

		///<summary>
		/// Use Caption as ALT and TITLE values: Check this box if you want the caption field's value to be used in the ALT and TITLE attributes as well if their respective fields are left empty.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useCaptionForAltAndTitle")]
		public bool UseCaptionForAltAndTitle => AbstractNcLinkItem.GetUseCaptionForAltAndTitle(this);
	}

	/// <summary>(Common) Link to File</summary>
	[PublishedModel("ncFileLinkItem")]
	public partial class NcFileLinkItem : PublishedElementModel, IAbstractNcLinkItem
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncFileLinkItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcFileLinkItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcFileLinkItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Link to File: If you specify a link here, internal link is ignored
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("fileLink")]
		public IPublishedContent FileLink => this.Value<IPublishedContent>("fileLink");

		///<summary>
		/// ALT text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altText")]
		public string AltText => AbstractNcLinkItem.GetAltText(this);

		///<summary>
		/// Caption: If you don't fill this field, the element will not be displayed at all.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("caption")]
		public string Caption => AbstractNcLinkItem.GetCaption(this);

		///<summary>
		/// Open Link in New Window
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("openLinkInNewWindow")]
		public bool OpenLinkInNewWindow => AbstractNcLinkItem.GetOpenLinkInNewWindow(this);

		///<summary>
		/// Other Attributes
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherAttributes")]
		public IEnumerable<NcNameValuePairItem> OtherAttributes => AbstractNcLinkItem.GetOtherAttributes(this);

		///<summary>
		/// TITLE text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleText")]
		public string TitleText => AbstractNcLinkItem.GetTitleText(this);

		///<summary>
		/// Use Caption as ALT and TITLE values: Check this box if you want the caption field's value to be used in the ALT and TITLE attributes as well if their respective fields are left empty.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useCaptionForAltAndTitle")]
		public bool UseCaptionForAltAndTitle => AbstractNcLinkItem.GetUseCaptionForAltAndTitle(this);
	}

	/// <summary>(Common) NcLink</summary>
	[PublishedModel("ncLink")]
	public partial class NcLink : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncLink";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcLink, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcLink(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Alt Text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altText")]
		public string AltText => this.Value<string>("altText");

		///<summary>
		/// Caption
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("caption")]
		public string Caption => this.Value<string>("caption");

		///<summary>
		/// External Link: This overrides the Internal Link / Link to File settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("externalLink")]
		public string ExternalLink => this.Value<string>("externalLink");

		///<summary>
		/// Link to File: This overrides the Internal Link setting
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("fileLink")]
		public IPublishedContent FileLink => this.Value<IPublishedContent>("fileLink");

		///<summary>
		/// Internal Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("internalLink")]
		public IPublishedContent InternalLink => this.Value<IPublishedContent>("internalLink");

		///<summary>
		/// Anchor: Use it in combination with the Internal Link if you need to point the user to a specific part of the target page
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("internalLinkAnchor")]
		public string InternalLinkAnchor => this.Value<string>("internalLinkAnchor");

		///<summary>
		/// Open in New Window
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("openLinkInNewWindow")]
		public bool OpenLinkInNewWindow => this.Value<bool>("openLinkInNewWindow");

		///<summary>
		/// Title Text: If left empty, it will return the value of "Alt Text"
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleText")]
		public string TitleText => this.Value<string>("titleText");
	}

	/// <summary>(Common) NcMetaTagItem</summary>
	[PublishedModel("ncMetaTagItem")]
	public partial class NcMetaTagItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncMetaTagItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcMetaTagItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcMetaTagItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Tag content: Enter the tag value
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("tagContent")]
		public string TagContent => this.Value<string>("tagContent");

		///<summary>
		/// Tag Name: Enter the tag name, e.g. rating
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("tagName")]
		public string TagName => this.Value<string>("tagName");
	}

	/// <summary>(Common) NcNameValuePairItem</summary>
	[PublishedModel("ncNameValuePairItem")]
	public partial class NcNameValuePairItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncNameValuePairItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcNameValuePairItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcNameValuePairItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Name
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("nvName")]
		public string NvName => this.Value<string>("nvName");

		///<summary>
		/// Value
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("nvValue")]
		public string NvValue => this.Value<string>("nvValue");
	}

	/// <summary>(Common) NcOpenGraphItem</summary>
	[PublishedModel("ncOpenGraphItem")]
	public partial class NcOpenGraphItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncOpenGraphItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcOpenGraphItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcOpenGraphItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Property content: Enter the property value
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("propertyContent")]
		public string PropertyContent => this.Value<string>("propertyContent");

		///<summary>
		/// Property Name: Enter the property name, e.g. article:author
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("propertyName")]
		public string PropertyName => this.Value<string>("propertyName");
	}

	/// <summary>(Common) NcScriptItem</summary>
	[PublishedModel("ncScriptItem")]
	public partial class NcScriptItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncScriptItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcScriptItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcScriptItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Content
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("content")]
		public string Content => this.Value<string>("content");

		///<summary>
		/// Cookie Level: Choose an appropriate cookie level or leave blank if script does not generate any cookie.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("cookieLevel")]
		public string CookieLevel => this.Value<string>("cookieLevel");

		///<summary>
		/// Exclusions: Select pages on which this script will NOT be included (applies to the whole tree from the selected page onward)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("exclusions")]
		public IEnumerable<IPublishedContent> Exclusions => this.Value<IEnumerable<IPublishedContent>>("exclusions");

		///<summary>
		/// Title: Title will not be used anywhere - use a title to indicate what the item is for, if you don't want the default "Item1", "Item2" etc. titles to be displayed.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>(Common) NcSocialLink</summary>
	[PublishedModel("ncSocialLink")]
	public partial class NcSocialLink : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncSocialLink";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcSocialLink, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcSocialLink(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("link")]
		public string Link => this.Value<string>("link");

		///<summary>
		/// Style
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("style")]
		public object Style => this.Value("style");
	}

	/// <summary>Placeholder Page</summary>
	[PublishedModel("pagePlaceholder")]
	public partial class PagePlaceholder : PublishedContentModel, IAbstractPageSections
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pagePlaceholder";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PagePlaceholder, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PagePlaceholder(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Intro Section
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("introSection")]
		public Umbraco.Core.Models.Blocks.BlockListModel IntroSection => AbstractPageSections.GetIntroSection(this);

		///<summary>
		/// Sections
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sections")]
		public Umbraco.Core.Models.Blocks.BlockListModel Sections => AbstractPageSections.GetSections(this);
	}

	/// <summary>Portfolio Page</summary>
	[PublishedModel("pagePortfolio")]
	public partial class PagePortfolio : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageBackgroundImage
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pagePortfolio";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PagePortfolio, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PagePortfolio(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Label for "All" category option: You can specify custom text for the "All" category option - if you don't enter text here the default setting from the Dictionary (Theme.Gallery.All) will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("allOptionLabel")]
		public string AllOptionLabel => this.Value<string>("allOptionLabel");

		///<summary>
		/// Columns: Select how many columns the images will be presented with (2 min, 4 max).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("columns")]
		public decimal Columns => this.Value<decimal>("columns");

		///<summary>
		/// Date format: Format when displaying dates. You can use standard formats like dd/MMM/yy. Default format if not specified is dd/MM/yyyy.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("dateFormat")]
		public string DateFormat => this.Value<string>("dateFormat");

		///<summary>
		/// Do not display categories: If you check this box, categories will not be displayed in the listing as well as in the detail page of each project. You can also leave this box unchecked and selectively hide the category list for specific projects in the portfolio item settings page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("doNotDisplayCategories")]
		public bool DoNotDisplayCategories => this.Value<bool>("doNotDisplayCategories");

		///<summary>
		/// Do not display release date: If you check this box, release date will not be displayed inside the page of each project. You can also leave this box unchecked and selectively hide release dates on specific projects, in the portfolio item settings page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("doNotDisplayReleaseDate")]
		public bool DoNotDisplayReleaseDate => this.Value<bool>("doNotDisplayReleaseDate");

		///<summary>
		/// Hide "All" category option: If you check this box, items will be filtered by the first category and there will be no "all" option in the category menu.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideAllCategoryOption")]
		public bool HideAllCategoryOption => this.Value<bool>("hideAllCategoryOption");

		///<summary>
		/// Hide next / previous item navigation: If you check this box, next/previous navigation will not be displayed at the bottom of each portfolio item page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideNextPrevious")]
		public bool HideNextPrevious => this.Value<bool>("hideNextPrevious");

		///<summary>
		/// Inherit background image: Check this box to have all portfolio item page inherit their top background image (and settings) from the page that contains this section
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("inheritBackgroundImage")]
		public bool InheritBackgroundImage => this.Value<bool>("inheritBackgroundImage");

		///<summary>
		/// Masonry: If you have images of uneven sizes and wish them to retain their sizes check this box. Otherwise the images will be automatically cropped around the focus point to form a grid.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("masonry")]
		public bool Masonry => this.Value<bool>("masonry");

		///<summary>
		/// Restrict next/previous projects to current project's categories: If checked, next/previous navigation will only include projects belonging to the same category (or categories) as the project being viewed.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("nextPrevRestrictToCategories")]
		public bool NextPrevRestrictToCategories => this.Value<bool>("nextPrevRestrictToCategories");

		///<summary>
		/// Random related projects: If "related projects" are empty for a specific item, display random related projects for this item.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("randomRelated")]
		public bool RandomRelated => this.Value<bool>("randomRelated");

		///<summary>
		/// Random related projects number: Number of random related items to show (only if random items are enabled). Default is 3.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("randomRelatedNumber")]
		public int RandomRelatedNumber => this.Value<int>("randomRelatedNumber");

		///<summary>
		/// Restrict random items to categories: If random related projects are enabled, checking this box restricts random projects only to categories the currently viewed item also belongs to
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("randomRelatedRestrictToCategories")]
		public bool RandomRelatedRestrictToCategories => this.Value<bool>("randomRelatedRestrictToCategories");

		///<summary>
		/// Default title for related projects section: This title will appear over the "related projects" section (wherever related projects have been defined). You can override this title per project. If you leave this empty, the section will be displayed without a title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("relatedTitle")]
		public string RelatedTitle => this.Value<string>("relatedTitle");

		///<summary>
		/// Show item count: Show a counter next to category names to indicate how many portfolio items belong to each category.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showItemCount")]
		public bool ShowItemCount => this.Value<bool>("showItemCount");

		///<summary>
		/// Sort by date
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sortByDate")]
		public bool SortByDate => this.Value<bool>("sortByDate");

		///<summary>
		/// Spacing between images: If this box is not checked, images will "stick" to each other
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("spacing")]
		public bool Spacing => this.Value<bool>("spacing");

		///<summary>
		/// Wide: Check this box to make the portfolio take the full width of the page on desktop resolutions.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("wide")]
		public bool Wide => this.Value<bool>("wide");

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => AbstractOpenGraph.GetApplyToSubPages(this);

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => AbstractOpenGraph.GetMetaDescription(this);

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => AbstractOpenGraph.GetMetaKeywords(this);

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => AbstractOpenGraph.GetMetaTitle(this);

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => AbstractOpenGraph.GetOgDescription(this);

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => AbstractOpenGraph.GetOgImage(this);

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => AbstractOpenGraph.GetOgTitle(this);

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => AbstractOpenGraph.GetOgType(this);

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => AbstractOpenGraph.GetOtherHttpEquivMetaTags(this);

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => AbstractOpenGraph.GetOtherMetaTags(this);

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => AbstractOpenGraph.GetOtherProperties(this);

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => AbstractPage.GetAltTitleBreadcrumb(this);

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => AbstractPage.GetAltTitleInternal(this);

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => AbstractPage.GetAltTitleMenu(this);

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => AbstractPage.GetBrowserTitleOverride(this);

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => AbstractPage.GetCodeAfterBodyStart(this);

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => AbstractPage.GetCodeBeforeBodyEnd(this);

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => AbstractPage.GetCodeInHeadElement(this);

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => AbstractPage.GetHideFromFooter(this);

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => AbstractPage.GetHideFromSearchResults(this);

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => AbstractPage.GetHideInSitemap(this);

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => AbstractPage.GetHideWholeHierarchyFromSearhResults(this);

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => AbstractPage.GetHideWholeHierarchyFromSitemap(this);

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => AbstractPage.GetOverrideTitle(this);

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => AbstractPage.GetPriority(this);

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => AbstractPage.GetRedirect(this);

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => AbstractPage.GetUmbracoNaviHide(this);

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => AbstractPage.GetUmbracoUrlAlias(this);

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => AbstractPage.GetUmbracoUrlName(this);

		///<summary>
		/// Apply Background Image to Sub Pages: Applies the setting to sub pages, unless they have it explicitly set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyBackgroundImageToSubPages")]
		public bool ApplyBackgroundImageToSubPages => AbstractPageBackgroundImage.GetApplyBackgroundImageToSubPages(this);

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backgroundImageSummary")]
		public string BackgroundImageSummary => AbstractPageBackgroundImage.GetBackgroundImageSummary(this);

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb => AbstractPageBackgroundImage.GetHideBreadcrumb(this);

		///<summary>
		/// Keep Sub Page Title: Check this when applying a background image to sub pages in order to retain the sub page's title. If you leave it unchecked, the page will also inherit the title from the page it gets the image from.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("keepSubPageTitle")]
		public bool KeepSubPageTitle => AbstractPageBackgroundImage.GetKeepSubPageTitle(this);

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight => AbstractPageBackgroundImage.GetLargeHeight(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractPageBackgroundImage.GetOverlay(this);

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage => AbstractPageBackgroundImage.GetPageBackgroundImage(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractPageBackgroundImage.GetUseLightTextColor(this);
	}

	/// <summary>Search Results</summary>
	[PublishedModel("pageSearchResults")]
	public partial class PageSearchResults : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageBackgroundImage
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pageSearchResults";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageSearchResults, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PageSearchResults(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => AbstractOpenGraph.GetApplyToSubPages(this);

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => AbstractOpenGraph.GetMetaDescription(this);

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => AbstractOpenGraph.GetMetaKeywords(this);

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => AbstractOpenGraph.GetMetaTitle(this);

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => AbstractOpenGraph.GetOgDescription(this);

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => AbstractOpenGraph.GetOgImage(this);

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => AbstractOpenGraph.GetOgTitle(this);

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => AbstractOpenGraph.GetOgType(this);

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => AbstractOpenGraph.GetOtherHttpEquivMetaTags(this);

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => AbstractOpenGraph.GetOtherMetaTags(this);

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => AbstractOpenGraph.GetOtherProperties(this);

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => AbstractPage.GetAltTitleBreadcrumb(this);

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => AbstractPage.GetAltTitleInternal(this);

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => AbstractPage.GetAltTitleMenu(this);

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => AbstractPage.GetBrowserTitleOverride(this);

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => AbstractPage.GetCodeAfterBodyStart(this);

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => AbstractPage.GetCodeBeforeBodyEnd(this);

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => AbstractPage.GetCodeInHeadElement(this);

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => AbstractPage.GetHideFromFooter(this);

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => AbstractPage.GetHideFromSearchResults(this);

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => AbstractPage.GetHideInSitemap(this);

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => AbstractPage.GetHideWholeHierarchyFromSearhResults(this);

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => AbstractPage.GetHideWholeHierarchyFromSitemap(this);

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => AbstractPage.GetOverrideTitle(this);

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => AbstractPage.GetPriority(this);

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => AbstractPage.GetRedirect(this);

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => AbstractPage.GetUmbracoNaviHide(this);

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => AbstractPage.GetUmbracoUrlAlias(this);

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => AbstractPage.GetUmbracoUrlName(this);

		///<summary>
		/// Apply Background Image to Sub Pages: Applies the setting to sub pages, unless they have it explicitly set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyBackgroundImageToSubPages")]
		public bool ApplyBackgroundImageToSubPages => AbstractPageBackgroundImage.GetApplyBackgroundImageToSubPages(this);

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backgroundImageSummary")]
		public string BackgroundImageSummary => AbstractPageBackgroundImage.GetBackgroundImageSummary(this);

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb => AbstractPageBackgroundImage.GetHideBreadcrumb(this);

		///<summary>
		/// Keep Sub Page Title: Check this when applying a background image to sub pages in order to retain the sub page's title. If you leave it unchecked, the page will also inherit the title from the page it gets the image from.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("keepSubPageTitle")]
		public bool KeepSubPageTitle => AbstractPageBackgroundImage.GetKeepSubPageTitle(this);

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight => AbstractPageBackgroundImage.GetLargeHeight(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractPageBackgroundImage.GetOverlay(this);

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage => AbstractPageBackgroundImage.GetPageBackgroundImage(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractPageBackgroundImage.GetUseLightTextColor(this);
	}

	/// <summary>Sitemap Page</summary>
	[PublishedModel("pageSiteMap")]
	public partial class PageSiteMap : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pageSiteMap";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageSiteMap, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PageSiteMap(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>Xml Sitemap Index Page</summary>
	[PublishedModel("pageXmlSitemapIndex")]
	public partial class PageXmlSitemapIndex : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pageXmlSitemapIndex";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageXmlSitemapIndex, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PageXmlSitemapIndex(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	// Mixin Content Type with alias "abstractBackgroundImageBlock"
	/// <summary>Abstract Background Image Block</summary>
	public partial interface IAbstractBackgroundImageBlock : IPublishedElement
	{
		/// <summary>Image</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		IPublishedContent Image { get; }

		/// <summary>Overlay</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		decimal Overlay { get; }

		/// <summary>Use Light Text Color</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool UseLightTextColor { get; }
	}

	/// <summary>Abstract Background Image Block</summary>
	[PublishedModel("abstractBackgroundImageBlock")]
	public partial class AbstractBackgroundImageBlock : PublishedElementModel, IAbstractBackgroundImageBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractBackgroundImageBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractBackgroundImageBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractBackgroundImageBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => GetImage(this);

		/// <summary>Static getter for Image</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedContent GetImage(IAbstractBackgroundImageBlock that) => that.Value<IPublishedContent>("image");

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => GetOverlay(this);

		/// <summary>Static getter for Overlay</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static decimal GetOverlay(IAbstractBackgroundImageBlock that) => that.Value<decimal>("overlay");

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => GetUseLightTextColor(this);

		/// <summary>Static getter for Use Light Text Color</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetUseLightTextColor(IAbstractBackgroundImageBlock that) => that.Value<bool>("useLightTextColor");
	}

	// Mixin Content Type with alias "abstractButtonLayoutBlock"
	/// <summary>Abstract Button Layout Block</summary>
	public partial interface IAbstractButtonLayoutBlock : IPublishedElement
	{
		/// <summary>Button Fill</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string ButtonFill { get; }

		/// <summary>Button Outline</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool ButtonOutline { get; }

		/// <summary>Button Size</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		decimal ButtonSize { get; }
	}

	/// <summary>Abstract Button Layout Block</summary>
	[PublishedModel("abstractButtonLayoutBlock")]
	public partial class AbstractButtonLayoutBlock : PublishedElementModel, IAbstractButtonLayoutBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractButtonLayoutBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractButtonLayoutBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractButtonLayoutBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Button Fill: Set the background color for the button. If you don't set anything, the default for this section will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonFill")]
		public string ButtonFill => GetButtonFill(this);

		/// <summary>Static getter for Button Fill</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetButtonFill(IAbstractButtonLayoutBlock that) => that.Value<string>("buttonFill");

		///<summary>
		/// Button Outline: Check this box to have the button display an outline instead of a background color.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonOutline")]
		public bool ButtonOutline => GetButtonOutline(this);

		/// <summary>Static getter for Button Outline</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetButtonOutline(IAbstractButtonLayoutBlock that) => that.Value<bool>("buttonOutline");

		///<summary>
		/// Button Size: Set a size for buttons on this section (0=smallest, 2=largest).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonSize")]
		public decimal ButtonSize => GetButtonSize(this);

		/// <summary>Static getter for Button Size</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static decimal GetButtonSize(IAbstractButtonLayoutBlock that) => that.Value<decimal>("buttonSize");
	}

	// Mixin Content Type with alias "abstractIntroBlock"
	/// <summary>Abstract Intro Block</summary>
	public partial interface IAbstractIntroBlock : IPublishedElement
	{
		/// <summary>Link Buttons</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		Umbraco.Core.Models.Blocks.BlockListModel LinkButtons { get; }

		/// <summary>Subtitle</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string Subtitle { get; }

		/// <summary>Summary</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string Summary { get; }
	}

	/// <summary>Abstract Intro Block</summary>
	[PublishedModel("abstractIntroBlock")]
	public partial class AbstractIntroBlock : PublishedElementModel, IAbstractIntroBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractIntroBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractIntroBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractIntroBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Link Buttons
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("linkButtons")]
		public Umbraco.Core.Models.Blocks.BlockListModel LinkButtons => GetLinkButtons(this);

		/// <summary>Static getter for Link Buttons</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static Umbraco.Core.Models.Blocks.BlockListModel GetLinkButtons(IAbstractIntroBlock that) => that.Value<Umbraco.Core.Models.Blocks.BlockListModel>("linkButtons");

		///<summary>
		/// Subtitle
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("subtitle")]
		public string Subtitle => GetSubtitle(this);

		/// <summary>Static getter for Subtitle</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetSubtitle(IAbstractIntroBlock that) => that.Value<string>("subtitle");

		///<summary>
		/// Summary
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("summary")]
		public string Summary => GetSummary(this);

		/// <summary>Static getter for Summary</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetSummary(IAbstractIntroBlock that) => that.Value<string>("summary");
	}

	// Mixin Content Type with alias "abstractPageWithSidebar"
	/// <summary>Abstract Page With Sidebar</summary>
	public partial interface IAbstractPageWithSidebar : IPublishedContent
	{
		/// <summary>Sidebar Options</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string SidebarOptions { get; }
	}

	/// <summary>Abstract Page With Sidebar</summary>
	[PublishedModel("abstractPageWithSidebar")]
	public partial class AbstractPageWithSidebar : PublishedContentModel, IAbstractPageWithSidebar
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractPageWithSidebar";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractPageWithSidebar, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractPageWithSidebar(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Sidebar Options
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sidebarOptions")]
		public string SidebarOptions => GetSidebarOptions(this);

		/// <summary>Static getter for Sidebar Options</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetSidebarOptions(IAbstractPageWithSidebar that) => that.Value<string>("sidebarOptions");
	}

	// Mixin Content Type with alias "abstractSectionEffectsBlock"
	/// <summary>Abstract Section Effects Block</summary>
	public partial interface IAbstractSectionEffectsBlock : IPublishedElement
	{
		/// <summary>Animation Direction</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string AnimationDirection { get; }

		/// <summary>Enable Animation</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool AnimationEnable { get; }

		/// <summary>Larger Animation</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool AnimationLarger { get; }
	}

	/// <summary>Abstract Section Effects Block</summary>
	[PublishedModel("abstractSectionEffectsBlock")]
	public partial class AbstractSectionEffectsBlock : PublishedElementModel, IAbstractSectionEffectsBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractSectionEffectsBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractSectionEffectsBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractSectionEffectsBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => GetAnimationDirection(this);

		/// <summary>Static getter for Animation Direction</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetAnimationDirection(IAbstractSectionEffectsBlock that) => that.Value<string>("animationDirection");

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => GetAnimationEnable(this);

		/// <summary>Static getter for Enable Animation</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetAnimationEnable(IAbstractSectionEffectsBlock that) => that.Value<bool>("animationEnable");

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => GetAnimationLarger(this);

		/// <summary>Static getter for Larger Animation</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetAnimationLarger(IAbstractSectionEffectsBlock that) => that.Value<bool>("animationLarger");
	}

	// Mixin Content Type with alias "abstractSectionLayoutBlock"
	/// <summary>Abstract Section Layout Block</summary>
	public partial interface IAbstractSectionLayoutBlock : IPublishedElement
	{
		/// <summary>Section Margin</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string SectionMargin { get; }

		/// <summary>Section Margin (Extra Small Screens)</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string SectionMarginExtraSmallScreens { get; }

		/// <summary>Section Margin (Mobile)</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string SectionMarginMobile { get; }

		/// <summary>Section Padding</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string SectionPadding { get; }

		/// <summary>Section Padding (Extra Small Screens)</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string SectionPaddingExtraSmallScreens { get; }

		/// <summary>Section Padding (Mobile)</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string SectionPaddingMobile { get; }
	}

	/// <summary>Abstract Section Layout Block</summary>
	[PublishedModel("abstractSectionLayoutBlock")]
	public partial class AbstractSectionLayoutBlock : PublishedElementModel, IAbstractSectionLayoutBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractSectionLayoutBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractSectionLayoutBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractSectionLayoutBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => GetSectionMargin(this);

		/// <summary>Static getter for Section Margin</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetSectionMargin(IAbstractSectionLayoutBlock that) => that.Value<string>("sectionMargin");

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => GetSectionMarginExtraSmallScreens(this);

		/// <summary>Static getter for Section Margin (Extra Small Screens)</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetSectionMarginExtraSmallScreens(IAbstractSectionLayoutBlock that) => that.Value<string>("sectionMarginExtraSmallScreens");

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => GetSectionMarginMobile(this);

		/// <summary>Static getter for Section Margin (Mobile)</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetSectionMarginMobile(IAbstractSectionLayoutBlock that) => that.Value<string>("sectionMarginMobile");

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => GetSectionPadding(this);

		/// <summary>Static getter for Section Padding</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetSectionPadding(IAbstractSectionLayoutBlock that) => that.Value<string>("sectionPadding");

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => GetSectionPaddingExtraSmallScreens(this);

		/// <summary>Static getter for Section Padding (Extra Small Screens)</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetSectionPaddingExtraSmallScreens(IAbstractSectionLayoutBlock that) => that.Value<string>("sectionPaddingExtraSmallScreens");

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => GetSectionPaddingMobile(this);

		/// <summary>Static getter for Section Padding (Mobile)</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetSectionPaddingMobile(IAbstractSectionLayoutBlock that) => that.Value<string>("sectionPaddingMobile");
	}

	// Mixin Content Type with alias "abstractSectionTitleBlock"
	/// <summary>Abstract Section Title Block</summary>
	public partial interface IAbstractSectionTitleBlock : IPublishedElement
	{
		/// <summary>Hide Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool HideTitle { get; }

		/// <summary>Title Orientation</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string TitleOrientation { get; }

		/// <summary>Title Size</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string TitleSize { get; }

		/// <summary>Title Spacing</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string TitleSpacing { get; }
	}

	/// <summary>Abstract Section Title Block</summary>
	[PublishedModel("abstractSectionTitleBlock")]
	public partial class AbstractSectionTitleBlock : PublishedElementModel, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractSectionTitleBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractSectionTitleBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractSectionTitleBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => GetHideTitle(this);

		/// <summary>Static getter for Hide Title</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetHideTitle(IAbstractSectionTitleBlock that) => that.Value<bool>("hideTitle");

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => GetTitleOrientation(this);

		/// <summary>Static getter for Title Orientation</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetTitleOrientation(IAbstractSectionTitleBlock that) => that.Value<string>("titleOrientation");

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => GetTitleSize(this);

		/// <summary>Static getter for Title Size</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetTitleSize(IAbstractSectionTitleBlock that) => that.Value<string>("titleSize");

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => GetTitleSpacing(this);

		/// <summary>Static getter for Title Spacing</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetTitleSpacing(IAbstractSectionTitleBlock that) => that.Value<string>("titleSpacing");
	}

	// Mixin Content Type with alias "abstractSliderSettingsBlock"
	/// <summary>Abstract Slider Settings Block</summary>
	public partial interface IAbstractSliderSettingsBlock : IPublishedElement
	{
		/// <summary>Auto Height</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool AutoHeight { get; }

		/// <summary>Manual Play</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool ManualPlay { get; }

		/// <summary>Show Bullets</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool ShowBullets { get; }

		/// <summary>Show Navigation Buttons</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool ShowNavigationButtons { get; }

		/// <summary>Slide Speed</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		decimal SlideSpeed { get; }

		/// <summary>Stop On Hover</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool StopOnHover { get; }
	}

	/// <summary>Abstract Slider Settings Block</summary>
	[PublishedModel("abstractSliderSettingsBlock")]
	public partial class AbstractSliderSettingsBlock : PublishedElementModel, IAbstractSliderSettingsBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractSliderSettingsBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractSliderSettingsBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractSliderSettingsBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Auto Height: Check to automatically adjust height to the content of each slide. Leave unchecked to have a stable height equal to the largest slide's height for all slides.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("autoHeight")]
		public bool AutoHeight => GetAutoHeight(this);

		/// <summary>Static getter for Auto Height</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetAutoHeight(IAbstractSliderSettingsBlock that) => that.Value<bool>("autoHeight");

		///<summary>
		/// Manual Play: Check to disable autoplay for the slider
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("manualPlay")]
		public bool ManualPlay => GetManualPlay(this);

		/// <summary>Static getter for Manual Play</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetManualPlay(IAbstractSliderSettingsBlock that) => that.Value<bool>("manualPlay");

		///<summary>
		/// Show Bullets: Check to show slide bullets at the bottom of slides
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showBullets")]
		public bool ShowBullets => GetShowBullets(this);

		/// <summary>Static getter for Show Bullets</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetShowBullets(IAbstractSliderSettingsBlock that) => that.Value<bool>("showBullets");

		///<summary>
		/// Show Navigation Buttons: Check to show next/previous buttons.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showNavigationButtons")]
		public bool ShowNavigationButtons => GetShowNavigationButtons(this);

		/// <summary>Static getter for Show Navigation Buttons</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetShowNavigationButtons(IAbstractSliderSettingsBlock that) => that.Value<bool>("showNavigationButtons");

		///<summary>
		/// Slide Speed: Time each slide remains on screen (in MS). Leave this setting to 0 to apply the default speed for this slider.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("slideSpeed")]
		public decimal SlideSpeed => GetSlideSpeed(this);

		/// <summary>Static getter for Slide Speed</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static decimal GetSlideSpeed(IAbstractSliderSettingsBlock that) => that.Value<decimal>("slideSpeed");

		///<summary>
		/// Stop On Hover: Check to make the slider stop changing slides when pointer is over it
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("stopOnHover")]
		public bool StopOnHover => GetStopOnHover(this);

		/// <summary>Static getter for Stop On Hover</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetStopOnHover(IAbstractSliderSettingsBlock that) => that.Value<bool>("stopOnHover");
	}

	/// <summary>AbstractLink</summary>
	[PublishedModel("Abstractlink")]
	public partial class Abstractlink : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "Abstractlink";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Abstractlink, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public Abstractlink(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// External Link: Optional link to an external page. External link always opens in a new window. External link OVERRIDES internal link in case it is also set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("externalLink")]
		public string ExternalLink => this.Value<string>("externalLink");

		///<summary>
		/// Internal Link: Link to a page on your site
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("internalLink")]
		public IPublishedContent InternalLink => this.Value<IPublishedContent>("internalLink");
	}

	// Mixin Content Type with alias "abstractNcBackgroundImage"
	/// <summary>AbstractNcBackgroundImage</summary>
	public partial interface IAbstractNcBackgroundImage : IPublishedElement
	{
		/// <summary>Image</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		IPublishedContent Image { get; }

		/// <summary>Overlay</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		decimal Overlay { get; }

		/// <summary>Use Light Text Color</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool UseLightTextColor { get; }
	}

	/// <summary>AbstractNcBackgroundImage</summary>
	[PublishedModel("abstractNcBackgroundImage")]
	public partial class AbstractNcBackgroundImage : PublishedElementModel, IAbstractNcBackgroundImage
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractNcBackgroundImage";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractNcBackgroundImage, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractNcBackgroundImage(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => GetImage(this);

		/// <summary>Static getter for Image</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedContent GetImage(IAbstractNcBackgroundImage that) => that.Value<IPublishedContent>("image");

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => GetOverlay(this);

		/// <summary>Static getter for Overlay</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static decimal GetOverlay(IAbstractNcBackgroundImage that) => that.Value<decimal>("overlay");

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => GetUseLightTextColor(this);

		/// <summary>Static getter for Use Light Text Color</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetUseLightTextColor(IAbstractNcBackgroundImage that) => that.Value<bool>("useLightTextColor");
	}

	// Mixin Content Type with alias "abstractNcButtonLayout"
	/// <summary>AbstractNcButtonLayout</summary>
	public partial interface IAbstractNcButtonLayout : IPublishedElement
	{
		/// <summary>Button Fill</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string ButtonFill { get; }

		/// <summary>Button Outline</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool ButtonOutline { get; }

		/// <summary>Button Size</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		decimal ButtonSize { get; }
	}

	/// <summary>AbstractNcButtonLayout</summary>
	[PublishedModel("abstractNcButtonLayout")]
	public partial class AbstractNcButtonLayout : PublishedElementModel, IAbstractNcButtonLayout
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractNcButtonLayout";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractNcButtonLayout, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractNcButtonLayout(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Button Fill: Set the background color for the button. If you don't set anything, the default for this section will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonFill")]
		public string ButtonFill => GetButtonFill(this);

		/// <summary>Static getter for Button Fill</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetButtonFill(IAbstractNcButtonLayout that) => that.Value<string>("buttonFill");

		///<summary>
		/// Button Outline: Check this box to have the button display an outline instead of a background color.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonOutline")]
		public bool ButtonOutline => GetButtonOutline(this);

		/// <summary>Static getter for Button Outline</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetButtonOutline(IAbstractNcButtonLayout that) => that.Value<bool>("buttonOutline");

		///<summary>
		/// Button Size: Set a size for buttons on this section (0=smallest, 2=largest).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonSize")]
		public decimal ButtonSize => GetButtonSize(this);

		/// <summary>Static getter for Button Size</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static decimal GetButtonSize(IAbstractNcButtonLayout that) => that.Value<decimal>("buttonSize");
	}

	// Mixin Content Type with alias "abstractNcIntro"
	/// <summary>AbstractNcIntro</summary>
	public partial interface IAbstractNcIntro : IPublishedElement
	{
		/// <summary>Link Buttons</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		Umbraco.Core.Models.Blocks.BlockListModel LinkButtons { get; }

		/// <summary>Subtitle</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string Subtitle { get; }

		/// <summary>Summary</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string Summary { get; }
	}

	/// <summary>AbstractNcIntro</summary>
	[PublishedModel("abstractNcIntro")]
	public partial class AbstractNcIntro : PublishedElementModel, IAbstractNcIntro
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractNcIntro";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractNcIntro, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractNcIntro(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Link Buttons
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("linkButtons")]
		public Umbraco.Core.Models.Blocks.BlockListModel LinkButtons => GetLinkButtons(this);

		/// <summary>Static getter for Link Buttons</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static Umbraco.Core.Models.Blocks.BlockListModel GetLinkButtons(IAbstractNcIntro that) => that.Value<Umbraco.Core.Models.Blocks.BlockListModel>("linkButtons");

		///<summary>
		/// Subtitle
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("subtitle")]
		public string Subtitle => GetSubtitle(this);

		/// <summary>Static getter for Subtitle</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetSubtitle(IAbstractNcIntro that) => that.Value<string>("subtitle");

		///<summary>
		/// Summary: Optional short text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("summary")]
		public string Summary => GetSummary(this);

		/// <summary>Static getter for Summary</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetSummary(IAbstractNcIntro that) => that.Value<string>("summary");
	}

	// Mixin Content Type with alias "abstractNcLinkItemBlock"
	/// <summary>AbstractNcLinkItemBlock</summary>
	public partial interface IAbstractNcLinkItemBlock : IPublishedElement
	{
		/// <summary>ALT text</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string AltText { get; }

		/// <summary>Caption</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string Caption { get; }

		/// <summary>Open Link in New Window</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool OpenLinkInNewWindow { get; }

		/// <summary>Other Attributes</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		Umbraco.Core.Models.Blocks.BlockListModel OtherAttributes { get; }

		/// <summary>TITLE text</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		string TitleText { get; }

		/// <summary>Use Caption as ALT and TITLE values</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		bool UseCaptionForAltAndTitle { get; }
	}

	/// <summary>AbstractNcLinkItemBlock</summary>
	[PublishedModel("abstractNcLinkItemBlock")]
	public partial class AbstractNcLinkItemBlock : PublishedElementModel, IAbstractNcLinkItemBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "abstractNcLinkItemBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<AbstractNcLinkItemBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public AbstractNcLinkItemBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// ALT text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altText")]
		public string AltText => GetAltText(this);

		/// <summary>Static getter for ALT text</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetAltText(IAbstractNcLinkItemBlock that) => that.Value<string>("altText");

		///<summary>
		/// Caption: If you don't fill this field, the element will not be displayed at all.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("caption")]
		public string Caption => GetCaption(this);

		/// <summary>Static getter for Caption</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetCaption(IAbstractNcLinkItemBlock that) => that.Value<string>("caption");

		///<summary>
		/// Open Link in New Window
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("openLinkInNewWindow")]
		public bool OpenLinkInNewWindow => GetOpenLinkInNewWindow(this);

		/// <summary>Static getter for Open Link in New Window</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetOpenLinkInNewWindow(IAbstractNcLinkItemBlock that) => that.Value<bool>("openLinkInNewWindow");

		///<summary>
		/// Other Attributes
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherAttributes")]
		public Umbraco.Core.Models.Blocks.BlockListModel OtherAttributes => GetOtherAttributes(this);

		/// <summary>Static getter for Other Attributes</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static Umbraco.Core.Models.Blocks.BlockListModel GetOtherAttributes(IAbstractNcLinkItemBlock that) => that.Value<Umbraco.Core.Models.Blocks.BlockListModel>("otherAttributes");

		///<summary>
		/// TITLE text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleText")]
		public string TitleText => GetTitleText(this);

		/// <summary>Static getter for TITLE text</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static string GetTitleText(IAbstractNcLinkItemBlock that) => that.Value<string>("titleText");

		///<summary>
		/// Use Caption as ALT and TITLE values: Check this box if you want the caption field's value to be used in the ALT and TITLE attributes as well if their respective fields are left empty.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useCaptionForAltAndTitle")]
		public bool UseCaptionForAltAndTitle => GetUseCaptionForAltAndTitle(this);

		/// <summary>Static getter for Use Caption as ALT and TITLE values</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static bool GetUseCaptionForAltAndTitle(IAbstractNcLinkItemBlock that) => that.Value<bool>("useCaptionForAltAndTitle");
	}

	/// <summary>Accordion Item</summary>
	[PublishedModel("blockAccordionItem")]
	public partial class BlockAccordionItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockAccordionItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockAccordionItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockAccordionItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Content
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("content")]
		public IHtmlString Content => this.Value<IHtmlString>("content");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Accordion Section Block</summary>
	[PublishedModel("sectionAccordionBlock")]
	public partial class SectionAccordionBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionAccordionBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionAccordionBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionAccordionBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Accordion Section Block Settings</summary>
	[PublishedModel("sectionAccordionBlockSettings")]
	public partial class SectionAccordionBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionAccordionBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionAccordionBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionAccordionBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Action Box Section Block</summary>
	[PublishedModel("sectionActionBoxBlock")]
	public partial class SectionActionBoxBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionActionBoxBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionActionBoxBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionActionBoxBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("link")]
		public Umbraco.Core.Models.Blocks.BlockListModel Link => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("link");

		///<summary>
		/// Summary
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("summary")]
		public string Summary => this.Value<string>("summary");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Action Box Section Block Settings</summary>
	[PublishedModel("sectionActionBoxBlockSettings")]
	public partial class SectionActionBoxBlockSettings : PublishedElementModel, IAbstractBackgroundImageBlock, IAbstractButtonLayoutBlock, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionActionBoxBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionActionBoxBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionActionBoxBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => AbstractBackgroundImageBlock.GetImage(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractBackgroundImageBlock.GetOverlay(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractBackgroundImageBlock.GetUseLightTextColor(this);

		///<summary>
		/// Button Fill: Set the background color for the button. If you don't set anything, the default for this section will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonFill")]
		public string ButtonFill => AbstractButtonLayoutBlock.GetButtonFill(this);

		///<summary>
		/// Button Outline: Check this box to have the button display an outline instead of a background color.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonOutline")]
		public bool ButtonOutline => AbstractButtonLayoutBlock.GetButtonOutline(this);

		///<summary>
		/// Button Size: Set a size for buttons on this section (0=smallest, 2=largest).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonSize")]
		public decimal ButtonSize => AbstractButtonLayoutBlock.GetButtonSize(this);

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Blog Articles Folder</summary>
	[PublishedModel("folderArticlePosts")]
	public partial class FolderArticlePosts : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "folderArticlePosts";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderArticlePosts, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public FolderArticlePosts(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>Blog Author</summary>
	[PublishedModel("pageBlogAuthor")]
	public partial class PageBlogAuthor : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractSocialLinks
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pageBlogAuthor";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageBlogAuthor, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PageBlogAuthor(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Author Bio Page
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("authorBioPage")]
		public IPublishedContent AuthorBioPage => this.Value<IPublishedContent>("authorBioPage");

		///<summary>
		/// Author image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("authorImage")]
		public IPublishedContent AuthorImage => this.Value<IPublishedContent>("authorImage");

		///<summary>
		/// Author Summary
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("authorSummary")]
		public IHtmlString AuthorSummary => this.Value<IHtmlString>("authorSummary");

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => AbstractOpenGraph.GetApplyToSubPages(this);

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => AbstractOpenGraph.GetMetaDescription(this);

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => AbstractOpenGraph.GetMetaKeywords(this);

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => AbstractOpenGraph.GetMetaTitle(this);

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => AbstractOpenGraph.GetOgDescription(this);

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => AbstractOpenGraph.GetOgImage(this);

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => AbstractOpenGraph.GetOgTitle(this);

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => AbstractOpenGraph.GetOgType(this);

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => AbstractOpenGraph.GetOtherHttpEquivMetaTags(this);

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => AbstractOpenGraph.GetOtherMetaTags(this);

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => AbstractOpenGraph.GetOtherProperties(this);

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => AbstractPage.GetAltTitleBreadcrumb(this);

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => AbstractPage.GetAltTitleInternal(this);

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => AbstractPage.GetAltTitleMenu(this);

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => AbstractPage.GetBrowserTitleOverride(this);

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => AbstractPage.GetCodeAfterBodyStart(this);

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => AbstractPage.GetCodeBeforeBodyEnd(this);

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => AbstractPage.GetCodeInHeadElement(this);

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => AbstractPage.GetHideFromFooter(this);

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => AbstractPage.GetHideFromSearchResults(this);

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => AbstractPage.GetHideInSitemap(this);

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => AbstractPage.GetHideWholeHierarchyFromSearhResults(this);

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => AbstractPage.GetHideWholeHierarchyFromSitemap(this);

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => AbstractPage.GetOverrideTitle(this);

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => AbstractPage.GetPriority(this);

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => AbstractPage.GetRedirect(this);

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => AbstractPage.GetUmbracoNaviHide(this);

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => AbstractPage.GetUmbracoUrlAlias(this);

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => AbstractPage.GetUmbracoUrlName(this);

		///<summary>
		/// Social Links: Valid style names (fontawesome): https://fontawesome.com/v4.7.0/icons/ (example: facebook, instagram, linkedin, youtube, github, vimeo, etc.)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("socialLinks")]
		public IEnumerable<NcSocialLink> SocialLinks => AbstractSocialLinks.GetSocialLinks(this);
	}

	/// <summary>Blog Authors Folder</summary>
	[PublishedModel("folderAuthors")]
	public partial class FolderAuthors : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "folderAuthors";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderAuthors, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public FolderAuthors(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>Blog Post</summary>
	[PublishedModel("pageArticleItem")]
	public partial class PageArticleItem : PublishedContentModel, IAbstractOpenGraph, IAbstractPage
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pageArticleItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageArticleItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PageArticleItem(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Author
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("author")]
		public IEnumerable<IPublishedContent> Author => this.Value<IEnumerable<IPublishedContent>>("author");

		///<summary>
		/// Categories
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("categories")]
		public IEnumerable<IPublishedContent> Categories => this.Value<IEnumerable<IPublishedContent>>("categories");

		///<summary>
		/// Content
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("content")]
		public IHtmlString Content => this.Value<IHtmlString>("content");

		///<summary>
		/// Post Date (alternate): If there is a value here, it will presented instead of the default "post date" field. 
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("dateLiteral")]
		public string DateLiteral => this.Value<string>("dateLiteral");

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => this.Value<IPublishedContent>("image");

		///<summary>
		/// List Image: Optionally select an image that will be displayed in lists containing this article. If you don't select an image here, other media contained in the article will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("listImage")]
		public IPublishedContent ListImage => this.Value<IPublishedContent>("listImage");

		///<summary>
		/// Post Date
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("postDate")]
		public DateTime PostDate => this.Value<DateTime>("postDate");

		///<summary>
		/// Summary: The summary that will be displayed in list views. If no summary is present, a portion of the actual article text will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("summary")]
		public string Summary => this.Value<string>("summary");

		///<summary>
		/// Tags
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("tags")]
		public IEnumerable<string> Tags => this.Value<IEnumerable<string>>("tags");

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => AbstractOpenGraph.GetApplyToSubPages(this);

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => AbstractOpenGraph.GetMetaDescription(this);

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => AbstractOpenGraph.GetMetaKeywords(this);

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => AbstractOpenGraph.GetMetaTitle(this);

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => AbstractOpenGraph.GetOgDescription(this);

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => AbstractOpenGraph.GetOgImage(this);

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => AbstractOpenGraph.GetOgTitle(this);

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => AbstractOpenGraph.GetOgType(this);

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => AbstractOpenGraph.GetOtherHttpEquivMetaTags(this);

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => AbstractOpenGraph.GetOtherMetaTags(this);

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => AbstractOpenGraph.GetOtherProperties(this);

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => AbstractPage.GetAltTitleBreadcrumb(this);

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => AbstractPage.GetAltTitleInternal(this);

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => AbstractPage.GetAltTitleMenu(this);

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => AbstractPage.GetBrowserTitleOverride(this);

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => AbstractPage.GetCodeAfterBodyStart(this);

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => AbstractPage.GetCodeBeforeBodyEnd(this);

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => AbstractPage.GetCodeInHeadElement(this);

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => AbstractPage.GetHideFromFooter(this);

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => AbstractPage.GetHideFromSearchResults(this);

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => AbstractPage.GetHideInSitemap(this);

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => AbstractPage.GetHideWholeHierarchyFromSearhResults(this);

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => AbstractPage.GetHideWholeHierarchyFromSitemap(this);

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => AbstractPage.GetOverrideTitle(this);

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => AbstractPage.GetPriority(this);

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => AbstractPage.GetRedirect(this);

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => AbstractPage.GetUmbracoNaviHide(this);

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => AbstractPage.GetUmbracoUrlAlias(this);

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => AbstractPage.GetUmbracoUrlName(this);
	}

	/// <summary>Blog Post List Page</summary>
	[PublishedModel("pageBlogList")]
	public partial class PageBlogList : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageBackgroundImage, IAbstractPageWithSidebar
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pageBlogList";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageBlogList, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PageBlogList(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Date format: Format when displaying dates. You can use standard formats like dd/MMM/yy. Default format if not specified is dd/MM/yyyy.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("dateFormat")]
		public string DateFormat => this.Value<string>("dateFormat");

		///<summary>
		/// Disable RSS Feed
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disableRSSFeed")]
		public bool DisableRssfeed => this.Value<bool>("disableRSSFeed");

		///<summary>
		/// Disqus Short Name: Enter your Disqus account's short name - you can find it under the General tab in Disqus settings. We'll take care of the rest.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disqusShortName")]
		public string DisqusShortName => this.Value<string>("disqusShortName");

		///<summary>
		/// Enable Comments
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("enableComments")]
		public bool EnableComments => this.Value<bool>("enableComments");

		///<summary>
		/// Hide authors: Check this box to hide anything author related from post lists and post pages. You will still be able to add authors and define an author for each post, but the information won't appear anywhere.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideAuthors")]
		public bool HideAuthors => this.Value<bool>("hideAuthors");

		///<summary>
		/// Hide categories: Check this box to hide anything category related from post lists and post pages. You will still be able to manage categories and assign articles to categories, but the information won't appear anywhere.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideCategories")]
		public bool HideCategories => this.Value<bool>("hideCategories");

		///<summary>
		/// Hide dates: Check this box to prevent post dates appearing in lists and individual posts. Posts will still be sorted by date, but the dates themselves will not appear anywhere.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideDates")]
		public bool HideDates => this.Value<bool>("hideDates");

		///<summary>
		/// Hide recent articles: Check this box to hide the recent articles list (where applicable)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideRecentArticles")]
		public bool HideRecentArticles => this.Value<bool>("hideRecentArticles");

		///<summary>
		/// Hide Summaries: Prevents displaying article summaries in list pages
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideSummaries")]
		public bool HideSummaries => this.Value<bool>("hideSummaries");

		///<summary>
		/// Hide tags: Check this box to hide anything tag related from post lists and posts. You will still be able to apply tags to posts, but they won't appear anywhere.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTags")]
		public bool HideTags => this.Value<bool>("hideTags");

		///<summary>
		/// Masonry Layout: Check to use a Masonry layout with images retaining different heights. If left unchecked, all images will feature the same height and posts will be presented in grid format.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("masonryLayout")]
		public bool MasonryLayout => this.Value<bool>("masonryLayout");

		///<summary>
		/// Posts Per Page: Number of posts per page. If you don't specify a value, 6 posts will be displayed per page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("postsPerPage")]
		public int PostsPerPage => this.Value<int>("postsPerPage");

		///<summary>
		/// Posts Per row: The number of items to show on each row of the list
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("postsPerRow")]
		public decimal PostsPerRow => this.Value<decimal>("postsPerRow");

		///<summary>
		/// Number of RSS Entries: The maximum number of items to get for any RSS feed. Enter 0 if you want to bring ALL items.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("rssItemsNumber")]
		public int RssItemsNumber => this.Value<int>("rssItemsNumber");

		///<summary>
		/// Summaries max length: Enter a number of characters after which a summary will be truncated. Default is 300. Summary will be truncated at the next word after the limit is reached.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("summariesMaxLength")]
		public int SummariesMaxLength => this.Value<int>("summariesMaxLength");

		///<summary>
		/// Widgets
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("widgets")]
		public IEnumerable<IPublishedElement> Widgets => this.Value<IEnumerable<IPublishedElement>>("widgets");

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => AbstractOpenGraph.GetApplyToSubPages(this);

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => AbstractOpenGraph.GetMetaDescription(this);

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => AbstractOpenGraph.GetMetaKeywords(this);

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => AbstractOpenGraph.GetMetaTitle(this);

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => AbstractOpenGraph.GetOgDescription(this);

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => AbstractOpenGraph.GetOgImage(this);

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => AbstractOpenGraph.GetOgTitle(this);

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => AbstractOpenGraph.GetOgType(this);

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => AbstractOpenGraph.GetOtherHttpEquivMetaTags(this);

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => AbstractOpenGraph.GetOtherMetaTags(this);

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => AbstractOpenGraph.GetOtherProperties(this);

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => AbstractPage.GetAltTitleBreadcrumb(this);

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => AbstractPage.GetAltTitleInternal(this);

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => AbstractPage.GetAltTitleMenu(this);

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => AbstractPage.GetBrowserTitleOverride(this);

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => AbstractPage.GetCodeAfterBodyStart(this);

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => AbstractPage.GetCodeBeforeBodyEnd(this);

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => AbstractPage.GetCodeInHeadElement(this);

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => AbstractPage.GetHideFromFooter(this);

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => AbstractPage.GetHideFromSearchResults(this);

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => AbstractPage.GetHideInSitemap(this);

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => AbstractPage.GetHideWholeHierarchyFromSearhResults(this);

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => AbstractPage.GetHideWholeHierarchyFromSitemap(this);

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => AbstractPage.GetOverrideTitle(this);

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => AbstractPage.GetPriority(this);

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => AbstractPage.GetRedirect(this);

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => AbstractPage.GetUmbracoNaviHide(this);

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => AbstractPage.GetUmbracoUrlAlias(this);

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => AbstractPage.GetUmbracoUrlName(this);

		///<summary>
		/// Apply Background Image to Sub Pages: Applies the setting to sub pages, unless they have it explicitly set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyBackgroundImageToSubPages")]
		public bool ApplyBackgroundImageToSubPages => AbstractPageBackgroundImage.GetApplyBackgroundImageToSubPages(this);

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backgroundImageSummary")]
		public string BackgroundImageSummary => AbstractPageBackgroundImage.GetBackgroundImageSummary(this);

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb => AbstractPageBackgroundImage.GetHideBreadcrumb(this);

		///<summary>
		/// Keep Sub Page Title: Check this when applying a background image to sub pages in order to retain the sub page's title. If you leave it unchecked, the page will also inherit the title from the page it gets the image from.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("keepSubPageTitle")]
		public bool KeepSubPageTitle => AbstractPageBackgroundImage.GetKeepSubPageTitle(this);

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight => AbstractPageBackgroundImage.GetLargeHeight(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractPageBackgroundImage.GetOverlay(this);

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage => AbstractPageBackgroundImage.GetPageBackgroundImage(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractPageBackgroundImage.GetUseLightTextColor(this);

		///<summary>
		/// Sidebar Options
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sidebarOptions")]
		public string SidebarOptions => AbstractPageWithSidebar.GetSidebarOptions(this);
	}

	/// <summary>Client Logo Item</summary>
	[PublishedModel("blockClientLogoItem")]
	public partial class BlockClientLogoItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockClientLogoItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockClientLogoItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockClientLogoItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("link")]
		public Umbraco.Core.Models.Blocks.BlockListModel Link => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("link");

		///<summary>
		/// Logo
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("logo")]
		public IPublishedContent Logo => this.Value<IPublishedContent>("logo");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Client Logos Section Block</summary>
	[PublishedModel("sectionClientLogosBlock")]
	public partial class SectionClientLogosBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionClientLogosBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionClientLogosBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionClientLogosBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Client Logos Section Block Settings</summary>
	[PublishedModel("sectionClientLogosBlockSettings")]
	public partial class SectionClientLogosBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock, IAbstractSliderSettingsBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionClientLogosBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionClientLogosBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionClientLogosBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Hide Text Bubbles: By default, a text bubble containing the item's node name will be displayed when you hover over any client logo. You can disable the text bubbles for all logos by checking this box.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTextBubbles")]
		public bool HideTextBubbles => this.Value<bool>("hideTextBubbles");

		///<summary>
		/// Random Order: Check this box to have logos displayed in random order each time the page is loaded.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("randomOrder")]
		public bool RandomOrder => this.Value<bool>("randomOrder");

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);

		///<summary>
		/// Auto Height: Check to automatically adjust height to the content of each slide. Leave unchecked to have a stable height equal to the largest slide's height for all slides.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("autoHeight")]
		public bool AutoHeight => AbstractSliderSettingsBlock.GetAutoHeight(this);

		///<summary>
		/// Manual Play: Check to disable autoplay for the slider
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("manualPlay")]
		public bool ManualPlay => AbstractSliderSettingsBlock.GetManualPlay(this);

		///<summary>
		/// Show Bullets: Check to show slide bullets at the bottom of slides
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showBullets")]
		public bool ShowBullets => AbstractSliderSettingsBlock.GetShowBullets(this);

		///<summary>
		/// Show Navigation Buttons: Check to show next/previous buttons.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showNavigationButtons")]
		public bool ShowNavigationButtons => AbstractSliderSettingsBlock.GetShowNavigationButtons(this);

		///<summary>
		/// Slide Speed: Time each slide remains on screen (in MS). Leave this setting to 0 to apply the default speed for this slider.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("slideSpeed")]
		public decimal SlideSpeed => AbstractSliderSettingsBlock.GetSlideSpeed(this);

		///<summary>
		/// Stop On Hover: Check to make the slider stop changing slides when pointer is over it
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("stopOnHover")]
		public bool StopOnHover => AbstractSliderSettingsBlock.GetStopOnHover(this);
	}

	/// <summary>Contact Section Block</summary>
	[PublishedModel("sectionContactBlock")]
	public partial class SectionContactBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionContactBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionContactBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionContactBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Acceptance Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("acceptanceLink")]
		public Umbraco.Core.Models.Blocks.BlockListModel AcceptanceLink => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("acceptanceLink");

		///<summary>
		/// Acceptance Literal
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("acceptanceLiteral")]
		public string AcceptanceLiteral => this.Value<string>("acceptanceLiteral");

		///<summary>
		/// Administrator's Email: The email address where notifications will be sent to
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("administratorsEmail")]
		public string AdministratorsEmail => this.Value<string>("administratorsEmail");

		///<summary>
		/// Dropdown 1 Values: Enter the values for the first drop down field, one per line. First line will be the caption for the field. If you leave this blank, no dropdown field will be displayed.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("dropdown1Values")]
		public string Dropdown1Values => this.Value<string>("dropdown1Values");

		///<summary>
		/// Dropdown 2 Values: Enter the values for the second drop down field, one per line. First line will be the caption for the field. If you leave this blank, no dropdown field will be displayed.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("dropdown2Values")]
		public string Dropdown2Values => this.Value<string>("dropdown2Values");

		///<summary>
		/// Hide Name: Check this box to hide the Name field
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideName")]
		public bool HideName => this.Value<bool>("hideName");

		///<summary>
		/// Hide Subject: Check this box to hide the subject field
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideSubject")]
		public bool HideSubject => this.Value<bool>("hideSubject");

		///<summary>
		/// Intro Text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("introText")]
		public string IntroText => this.Value<string>("introText");

		///<summary>
		/// Notification Email Body: Any text you would like to appear before the actual contents of the user's message, in the notification email sent to the administrator.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("notificationEmailBody")]
		public string NotificationEmailBody => this.Value<string>("notificationEmailBody");

		///<summary>
		/// Notification Email Subject: The subject of the notification email. If you leave this blank and have the subject form field enabled, it will contain the contents of the subject field. If the subject form field is not enabled and this field is blank, a standard subject from the dictionary will be displayed.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("notificationEmailSubject")]
		public string NotificationEmailSubject => this.Value<string>("notificationEmailSubject");

		///<summary>
		/// Notification Mail From: The email address notification emails will be sent from
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("notificationMailFrom")]
		public string NotificationMailFrom => this.Value<string>("notificationMailFrom");

		///<summary>
		/// Notification Mail Sender Alias: A literal to display in place of the sender's email address when notifications are sent.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("notificationMailSenderAlias")]
		public string NotificationMailSenderAlias => this.Value<string>("notificationMailSenderAlias");

		///<summary>
		/// ReCaptcha Site Key
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("reCaptchaSiteKey")]
		public string ReCaptchaSiteKey => this.Value<string>("reCaptchaSiteKey");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Contact Section Block Settings</summary>
	[PublishedModel("sectionContactBlockSettings")]
	public partial class SectionContactBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionContactBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionContactBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionContactBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Content Page With Sidebar</summary>
	[PublishedModel("pageContentWithSidebar")]
	public partial class PageContentWithSidebar : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageBackgroundImage, IAbstractPageSections, IAbstractPageWithSidebar
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pageContentWithSidebar";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageContentWithSidebar, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PageContentWithSidebar(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => AbstractOpenGraph.GetApplyToSubPages(this);

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => AbstractOpenGraph.GetMetaDescription(this);

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => AbstractOpenGraph.GetMetaKeywords(this);

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => AbstractOpenGraph.GetMetaTitle(this);

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => AbstractOpenGraph.GetOgDescription(this);

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => AbstractOpenGraph.GetOgImage(this);

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => AbstractOpenGraph.GetOgTitle(this);

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => AbstractOpenGraph.GetOgType(this);

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => AbstractOpenGraph.GetOtherHttpEquivMetaTags(this);

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => AbstractOpenGraph.GetOtherMetaTags(this);

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => AbstractOpenGraph.GetOtherProperties(this);

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => AbstractPage.GetAltTitleBreadcrumb(this);

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => AbstractPage.GetAltTitleInternal(this);

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => AbstractPage.GetAltTitleMenu(this);

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => AbstractPage.GetBrowserTitleOverride(this);

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => AbstractPage.GetCodeAfterBodyStart(this);

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => AbstractPage.GetCodeBeforeBodyEnd(this);

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => AbstractPage.GetCodeInHeadElement(this);

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => AbstractPage.GetHideFromFooter(this);

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => AbstractPage.GetHideFromSearchResults(this);

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => AbstractPage.GetHideInSitemap(this);

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => AbstractPage.GetHideWholeHierarchyFromSearhResults(this);

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => AbstractPage.GetHideWholeHierarchyFromSitemap(this);

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => AbstractPage.GetOverrideTitle(this);

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => AbstractPage.GetPriority(this);

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => AbstractPage.GetRedirect(this);

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => AbstractPage.GetUmbracoNaviHide(this);

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => AbstractPage.GetUmbracoUrlAlias(this);

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => AbstractPage.GetUmbracoUrlName(this);

		///<summary>
		/// Apply Background Image to Sub Pages: Applies the setting to sub pages, unless they have it explicitly set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyBackgroundImageToSubPages")]
		public bool ApplyBackgroundImageToSubPages => AbstractPageBackgroundImage.GetApplyBackgroundImageToSubPages(this);

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backgroundImageSummary")]
		public string BackgroundImageSummary => AbstractPageBackgroundImage.GetBackgroundImageSummary(this);

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb => AbstractPageBackgroundImage.GetHideBreadcrumb(this);

		///<summary>
		/// Keep Sub Page Title: Check this when applying a background image to sub pages in order to retain the sub page's title. If you leave it unchecked, the page will also inherit the title from the page it gets the image from.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("keepSubPageTitle")]
		public bool KeepSubPageTitle => AbstractPageBackgroundImage.GetKeepSubPageTitle(this);

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight => AbstractPageBackgroundImage.GetLargeHeight(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractPageBackgroundImage.GetOverlay(this);

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage => AbstractPageBackgroundImage.GetPageBackgroundImage(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractPageBackgroundImage.GetUseLightTextColor(this);

		///<summary>
		/// Intro Section
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("introSection")]
		public Umbraco.Core.Models.Blocks.BlockListModel IntroSection => AbstractPageSections.GetIntroSection(this);

		///<summary>
		/// Sections
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sections")]
		public Umbraco.Core.Models.Blocks.BlockListModel Sections => AbstractPageSections.GetSections(this);

		///<summary>
		/// Sidebar Options
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sidebarOptions")]
		public string SidebarOptions => AbstractPageWithSidebar.GetSidebarOptions(this);
	}

	/// <summary>Content Slider Item</summary>
	[PublishedModel("blockContentSliderItem")]
	public partial class BlockContentSliderItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockContentSliderItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockContentSliderItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockContentSliderItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Content
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("content")]
		public IHtmlString Content => this.Value<IHtmlString>("content");

		///<summary>
		/// Image: Image should have a width of 550 px or more. Smaller images will be upscaled to 550px in desktop resolutions.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => this.Value<IPublishedContent>("image");

		///<summary>
		/// Image Position
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("imagePosition")]
		public string ImagePosition => this.Value<string>("imagePosition");

		///<summary>
		/// Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("link")]
		public Umbraco.Core.Models.Blocks.BlockListModel Link => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("link");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Content Slider Section Block</summary>
	[PublishedModel("sectionContentSliderBlock")]
	public partial class SectionContentSliderBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionContentSliderBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionContentSliderBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionContentSliderBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Content Slider Section Block Settings</summary>
	[PublishedModel("sectionContentSliderBlockSettings")]
	public partial class SectionContentSliderBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSliderSettingsBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionContentSliderBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionContentSliderBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionContentSliderBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Auto Height: Check to automatically adjust height to the content of each slide. Leave unchecked to have a stable height equal to the largest slide's height for all slides.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("autoHeight")]
		public bool AutoHeight => AbstractSliderSettingsBlock.GetAutoHeight(this);

		///<summary>
		/// Manual Play: Check to disable autoplay for the slider
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("manualPlay")]
		public bool ManualPlay => AbstractSliderSettingsBlock.GetManualPlay(this);

		///<summary>
		/// Show Bullets: Check to show slide bullets at the bottom of slides
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showBullets")]
		public bool ShowBullets => AbstractSliderSettingsBlock.GetShowBullets(this);

		///<summary>
		/// Show Navigation Buttons: Check to show next/previous buttons.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showNavigationButtons")]
		public bool ShowNavigationButtons => AbstractSliderSettingsBlock.GetShowNavigationButtons(this);

		///<summary>
		/// Slide Speed: Time each slide remains on screen (in MS). Leave this setting to 0 to apply the default speed for this slider.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("slideSpeed")]
		public decimal SlideSpeed => AbstractSliderSettingsBlock.GetSlideSpeed(this);

		///<summary>
		/// Stop On Hover: Check to make the slider stop changing slides when pointer is over it
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("stopOnHover")]
		public bool StopOnHover => AbstractSliderSettingsBlock.GetStopOnHover(this);
	}

	/// <summary>Counter Item</summary>
	[PublishedModel("blockCounterItem")]
	public partial class BlockCounterItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockCounterItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockCounterItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockCounterItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Counter
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("counter")]
		public string Counter => this.Value<string>("counter");

		///<summary>
		/// Counter Text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("counterText")]
		public string CounterText => this.Value<string>("counterText");
	}

	/// <summary>Counters Section Block</summary>
	[PublishedModel("sectionCounterBlock")]
	public partial class SectionCounterBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionCounterBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionCounterBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionCounterBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Counters Section Block Settings</summary>
	[PublishedModel("sectionCounterBlockSettings")]
	public partial class SectionCounterBlockSettings : PublishedElementModel, IAbstractBackgroundImageBlock, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionCounterBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionCounterBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionCounterBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Easing: Leave this empty to apply the default setting.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("easing")]
		public string Easing => this.Value<string>("easing");

		///<summary>
		/// Speed: Time to count to the final number (in MS). Leave this to 0 to apply the default setting.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("speed")]
		public decimal Speed => this.Value<decimal>("speed");

		///<summary>
		/// Text Orientation: Default orientation is text center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("textOrientation")]
		public string TextOrientation => this.Value<string>("textOrientation");

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => AbstractBackgroundImageBlock.GetImage(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractBackgroundImageBlock.GetOverlay(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractBackgroundImageBlock.GetUseLightTextColor(this);

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);
	}

	/// <summary>External Link</summary>
	[PublishedModel("externalLinkBlock")]
	public partial class ExternalLinkBlock : PublishedElementModel, IAbstractNcLinkItemBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "externalLinkBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ExternalLinkBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public ExternalLinkBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// External Link: If you specify an external link here, any internal link and/or link to file will be ignored.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("externalLink")]
		public string ExternalLink => this.Value<string>("externalLink");

		///<summary>
		/// ALT text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altText")]
		public string AltText => AbstractNcLinkItemBlock.GetAltText(this);

		///<summary>
		/// Caption: If you don't fill this field, the element will not be displayed at all.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("caption")]
		public string Caption => AbstractNcLinkItemBlock.GetCaption(this);

		///<summary>
		/// Open Link in New Window
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("openLinkInNewWindow")]
		public bool OpenLinkInNewWindow => AbstractNcLinkItemBlock.GetOpenLinkInNewWindow(this);

		///<summary>
		/// Other Attributes
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherAttributes")]
		public Umbraco.Core.Models.Blocks.BlockListModel OtherAttributes => AbstractNcLinkItemBlock.GetOtherAttributes(this);

		///<summary>
		/// TITLE text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleText")]
		public string TitleText => AbstractNcLinkItemBlock.GetTitleText(this);

		///<summary>
		/// Use Caption as ALT and TITLE values: Check this box if you want the caption field's value to be used in the ALT and TITLE attributes as well if their respective fields are left empty.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useCaptionForAltAndTitle")]
		public bool UseCaptionForAltAndTitle => AbstractNcLinkItemBlock.GetUseCaptionForAltAndTitle(this);
	}

	/// <summary>FAQ (Tabbed) Section Block</summary>
	[PublishedModel("sectionFaqTabbedBlock")]
	public partial class SectionFaqTabbedBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionFaqTabbedBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionFaqTabbedBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionFaqTabbedBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>FAQ (Tabbed) Section Block Settings</summary>
	[PublishedModel("sectionFaqTabbedBlockSettings")]
	public partial class SectionFaqTabbedBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionFaqTabbedBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionFaqTabbedBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionFaqTabbedBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>FAQ Item</summary>
	[PublishedModel("blockFaqItem")]
	public partial class BlockFaqItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockFaqItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockFaqItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockFaqItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Answer
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("answer")]
		public IHtmlString Answer => this.Value<IHtmlString>("answer");

		///<summary>
		/// Question
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("question")]
		public string Question => this.Value<string>("question");
	}

	/// <summary>FAQ Section Block</summary>
	[PublishedModel("sectionFaqBlock")]
	public partial class SectionFaqBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionFaqBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionFaqBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionFaqBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>FAQ Section Block Settings</summary>
	[PublishedModel("sectionFaqBlockSettings")]
	public partial class SectionFaqBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionFaqBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionFaqBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionFaqBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>FAQ Tab Item</summary>
	[PublishedModel("blockFaqTabItem")]
	public partial class BlockFaqTabItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockFaqTabItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockFaqTabItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockFaqTabItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Icon
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("icon")]
		public object Icon => this.Value("icon");

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Feature Item</summary>
	[PublishedModel("blockFeatureItem")]
	public partial class BlockFeatureItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockFeatureItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockFeatureItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockFeatureItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Custom Icon: This will override Icon picker above.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("customIcon")]
		public IPublishedContent CustomIcon => this.Value<IPublishedContent>("customIcon");

		///<summary>
		/// Icon
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("icon")]
		public object Icon => this.Value("icon");

		///<summary>
		/// Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("link")]
		public Umbraco.Core.Models.Blocks.BlockListModel Link => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("link");

		///<summary>
		/// Summary
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("summary")]
		public string Summary => this.Value<string>("summary");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Features Section Block</summary>
	[PublishedModel("sectionFeaturesBlock")]
	public partial class SectionFeaturesBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionFeaturesBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionFeaturesBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionFeaturesBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Center Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("centerImage")]
		public IPublishedContent CenterImage => this.Value<IPublishedContent>("centerImage");

		///<summary>
		/// Items Left Side
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("itemsLeftSide")]
		public Umbraco.Core.Models.Blocks.BlockListModel ItemsLeftSide => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("itemsLeftSide");

		///<summary>
		/// Items Right Side
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("itemsRightSide")]
		public Umbraco.Core.Models.Blocks.BlockListModel ItemsRightSide => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("itemsRightSide");

		///<summary>
		/// Subtitle
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("subtitle")]
		public string Subtitle => this.Value<string>("subtitle");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Features Section Block Settings</summary>
	[PublishedModel("sectionFeaturesBlockSettings")]
	public partial class SectionFeaturesBlockSettings : PublishedElementModel, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionFeaturesBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionFeaturesBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionFeaturesBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Image Banner Section Block</summary>
	[PublishedModel("sectionImageBannerBlock")]
	public partial class SectionImageBannerBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionImageBannerBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionImageBannerBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionImageBannerBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => this.Value<IPublishedContent>("image");

		///<summary>
		/// Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("link")]
		public Umbraco.Core.Models.Blocks.BlockListModel Link => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("link");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Image Banner Section Block Settings</summary>
	[PublishedModel("sectionImageBannerBlockSettings")]
	public partial class SectionImageBannerBlockSettings : PublishedElementModel, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionImageBannerBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionImageBannerBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionImageBannerBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Image Gallery Categories</summary>
	[PublishedModel("categoriesImageGallery")]
	public partial class CategoriesImageGallery : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "categoriesImageGallery";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CategoriesImageGallery, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public CategoriesImageGallery(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>Image Gallery Category</summary>
	[PublishedModel("categoryImageGallery")]
	public partial class CategoryImageGallery : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "categoryImageGallery";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CategoryImageGallery, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public CategoryImageGallery(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>Image Gallery Item</summary>
	[PublishedModel("blockImageGalleryItem")]
	public partial class BlockImageGalleryItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockImageGalleryItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockImageGalleryItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockImageGalleryItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Categories
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("categories")]
		public IEnumerable<IPublishedContent> Categories => this.Value<IEnumerable<IPublishedContent>>("categories");

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => this.Value<IPublishedContent>("image");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Image Gallery Item</summary>
	[PublishedModel("dImageGalleryItem")]
	public partial class DImageGalleryItem : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "dImageGalleryItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<DImageGalleryItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public DImageGalleryItem(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Categories
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("categories")]
		public IPublishedContent Categories => this.Value<IPublishedContent>("categories");

		///<summary>
		/// Image: Image will be resized to a max width of 800 pixels to avoid large image sizes. 
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("imageFromMedia")]
		public decimal ImageFromMedia => this.Value<decimal>("imageFromMedia");
	}

	/// <summary>Image Gallery Section Block</summary>
	[PublishedModel("sectionImageGalleryBlock")]
	public partial class SectionImageGalleryBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionImageGalleryBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionImageGalleryBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionImageGalleryBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Label for "All" category option: You can specify custom text for the "All" category option - if you don't enter text here the default setting from the Dictionary (Theme.Gallery.All) will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("allOptionLabel")]
		public string AllOptionLabel => this.Value<string>("allOptionLabel");

		///<summary>
		/// Columns: Select how many columns the images will be presented with.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("columns")]
		public decimal Columns => this.Value<decimal>("columns");

		///<summary>
		/// Do not display categories: If you check this box, categories will not be displayed in the image listing (category menu will still display and you can still assign items to categories)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("doNotDisplayCategories")]
		public bool DoNotDisplayCategories => this.Value<bool>("doNotDisplayCategories");

		///<summary>
		/// Hide "All" category option: If you check this box, items will be filtered by the first category and there will be no "all" option in the category menu.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideAllCategoryOption")]
		public bool HideAllCategoryOption => this.Value<bool>("hideAllCategoryOption");

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Masonry: If you have images of uneven sizes and wish them to retain their sizes check this box. Otherwise the images will be automatically cropped around the focus point to form a grid.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("masonry")]
		public bool Masonry => this.Value<bool>("masonry");

		///<summary>
		/// Spacing between images: If this box is not checked, images will "stick" to each other
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("spacing")]
		public bool Spacing => this.Value<bool>("spacing");

		///<summary>
		/// Upscale Images: If you check this box, the images displayed when a user clicks on the thumbs will be upscaled to match a maximum presentation size for the screen. Otherwise, they will be displayed at their original size. 
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("upscaleImages")]
		public bool UpscaleImages => this.Value<bool>("upscaleImages");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Image Gallery Section Block Settings</summary>
	[PublishedModel("sectionImageGalleryBlockSettings")]
	public partial class SectionImageGalleryBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionImageGalleryBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionImageGalleryBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionImageGalleryBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Image Text Section Block</summary>
	[PublishedModel("sectionImageTextBlock")]
	public partial class SectionImageTextBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionImageTextBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionImageTextBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionImageTextBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => this.Value<IPublishedContent>("image");

		///<summary>
		/// Image Left Side: Enable this to have the image on the left and text on the right.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("imageLeftSide")]
		public bool ImageLeftSide => this.Value<bool>("imageLeftSide");

		///<summary>
		/// Text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("text")]
		public IHtmlString Text => this.Value<IHtmlString>("text");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Image Text Section Block Settings</summary>
	[PublishedModel("sectionImageTextBlockSettings")]
	public partial class SectionImageTextBlockSettings : PublishedElementModel, IAbstractSectionLayoutBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionImageTextBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionImageTextBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionImageTextBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);
	}

	/// <summary>Internal Link</summary>
	[PublishedModel("internalLinkBlock")]
	public partial class InternalLinkBlock : PublishedElementModel, IAbstractNcLinkItemBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "internalLinkBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<InternalLinkBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public InternalLinkBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Internal Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("internalLink")]
		public IPublishedContent InternalLink => this.Value<IPublishedContent>("internalLink");

		///<summary>
		/// Internal Link Anchor: Use this in combination with the internal link to navigate to a specific part of the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("internalLinkAnchor")]
		public string InternalLinkAnchor => this.Value<string>("internalLinkAnchor");

		///<summary>
		/// Internal Link Querystring Parameters: Enter any additional querystring parameters you want to add to the internal link, in the form "a=1&b=2" (without the question mark).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("internalLinkQuerystringParameters")]
		public string InternalLinkQuerystringParameters => this.Value<string>("internalLinkQuerystringParameters");

		///<summary>
		/// ALT text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altText")]
		public string AltText => AbstractNcLinkItemBlock.GetAltText(this);

		///<summary>
		/// Caption: If you don't fill this field, the element will not be displayed at all.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("caption")]
		public string Caption => AbstractNcLinkItemBlock.GetCaption(this);

		///<summary>
		/// Open Link in New Window
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("openLinkInNewWindow")]
		public bool OpenLinkInNewWindow => AbstractNcLinkItemBlock.GetOpenLinkInNewWindow(this);

		///<summary>
		/// Other Attributes
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherAttributes")]
		public Umbraco.Core.Models.Blocks.BlockListModel OtherAttributes => AbstractNcLinkItemBlock.GetOtherAttributes(this);

		///<summary>
		/// TITLE text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleText")]
		public string TitleText => AbstractNcLinkItemBlock.GetTitleText(this);

		///<summary>
		/// Use Caption as ALT and TITLE values: Check this box if you want the caption field's value to be used in the ALT and TITLE attributes as well if their respective fields are left empty.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useCaptionForAltAndTitle")]
		public bool UseCaptionForAltAndTitle => AbstractNcLinkItemBlock.GetUseCaptionForAltAndTitle(this);
	}

	/// <summary>Intro - Hero Image Slider Section Block</summary>
	[PublishedModel("sectionIntroHeroImageSliderBlock")]
	public partial class SectionIntroHeroImageSliderBlock : PublishedElementModel, IAbstractIntroSectionBlock, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionIntroHeroImageSliderBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionIntroHeroImageSliderBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionIntroHeroImageSliderBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Images
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("images")]
		public Umbraco.Core.Models.Blocks.BlockListModel Images => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("images");

		///<summary>
		/// Light Top Menu: Enable this to have menu color in white
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("lightTopMenu")]
		public bool LightTopMenu => AbstractIntroSectionBlock.GetLightTopMenu(this);

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Intro - Hero Image Slider Section Block Settings</summary>
	[PublishedModel("sectionIntroHeroImageSliderBlockSettings")]
	public partial class SectionIntroHeroImageSliderBlockSettings : PublishedElementModel, IAbstractSliderSettingsBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionIntroHeroImageSliderBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionIntroHeroImageSliderBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionIntroHeroImageSliderBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animation")]
		public string Animation => this.Value<string>("animation");

		///<summary>
		/// Direction: Direction only works with sliding animations
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("direction")]
		public string Direction => this.Value<string>("direction");

		///<summary>
		/// Easing: Leave this empty to apply default easing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("easing")]
		public string Easing => this.Value<string>("easing");

		///<summary>
		/// Slide duration: The time each slide will remain on screen before the next one appears (in MS). Leave it at 0 to apply the default speed for this slider.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("slideDuration")]
		public decimal SlideDuration => this.Value<decimal>("slideDuration");

		///<summary>
		/// Transition Speed: The time each transition will last (in MS). Leave speed at 0 to apply default speed for this slider
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("speed")]
		public decimal Speed => this.Value<decimal>("speed");

		///<summary>
		/// Auto Height: Check to automatically adjust height to the content of each slide. Leave unchecked to have a stable height equal to the largest slide's height for all slides.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("autoHeight")]
		public bool AutoHeight => AbstractSliderSettingsBlock.GetAutoHeight(this);

		///<summary>
		/// Manual Play: Check to disable autoplay for the slider
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("manualPlay")]
		public bool ManualPlay => AbstractSliderSettingsBlock.GetManualPlay(this);

		///<summary>
		/// Show Bullets: Check to show slide bullets at the bottom of slides
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showBullets")]
		public bool ShowBullets => AbstractSliderSettingsBlock.GetShowBullets(this);

		///<summary>
		/// Show Navigation Buttons: Check to show next/previous buttons.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showNavigationButtons")]
		public bool ShowNavigationButtons => AbstractSliderSettingsBlock.GetShowNavigationButtons(this);

		///<summary>
		/// Slide Speed: Time each slide remains on screen (in MS). Leave this setting to 0 to apply the default speed for this slider.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("slideSpeed")]
		public decimal SlideSpeed => AbstractSliderSettingsBlock.GetSlideSpeed(this);

		///<summary>
		/// Stop On Hover: Check to make the slider stop changing slides when pointer is over it
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("stopOnHover")]
		public bool StopOnHover => AbstractSliderSettingsBlock.GetStopOnHover(this);
	}

	/// <summary>Intro - Image Slider Section Block</summary>
	[PublishedModel("sectionIntroImageSliderBlock")]
	public partial class SectionIntroImageSliderBlock : PublishedElementModel, IAbstractIntroSectionBlock, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionIntroImageSliderBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionIntroImageSliderBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionIntroImageSliderBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Images
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("images")]
		public Umbraco.Core.Models.Blocks.BlockListModel Images => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("images");

		///<summary>
		/// Light Top Menu: Enable this to have menu color in white
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("lightTopMenu")]
		public bool LightTopMenu => AbstractIntroSectionBlock.GetLightTopMenu(this);

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Intro - Image Slider Section Block Settings</summary>
	[PublishedModel("sectionIntroImageSliderBlockSettings")]
	public partial class SectionIntroImageSliderBlockSettings : PublishedElementModel, IAbstractSliderSettingsBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionIntroImageSliderBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionIntroImageSliderBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionIntroImageSliderBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Auto Height: Check to automatically adjust height to the content of each slide. Leave unchecked to have a stable height equal to the largest slide's height for all slides.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("autoHeight")]
		public bool AutoHeight => AbstractSliderSettingsBlock.GetAutoHeight(this);

		///<summary>
		/// Manual Play: Check to disable autoplay for the slider
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("manualPlay")]
		public bool ManualPlay => AbstractSliderSettingsBlock.GetManualPlay(this);

		///<summary>
		/// Show Bullets: Check to show slide bullets at the bottom of slides
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showBullets")]
		public bool ShowBullets => AbstractSliderSettingsBlock.GetShowBullets(this);

		///<summary>
		/// Show Navigation Buttons: Check to show next/previous buttons.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showNavigationButtons")]
		public bool ShowNavigationButtons => AbstractSliderSettingsBlock.GetShowNavigationButtons(this);

		///<summary>
		/// Slide Speed: Time each slide remains on screen (in MS). Leave this setting to 0 to apply the default speed for this slider.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("slideSpeed")]
		public decimal SlideSpeed => AbstractSliderSettingsBlock.GetSlideSpeed(this);

		///<summary>
		/// Stop On Hover: Check to make the slider stop changing slides when pointer is over it
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("stopOnHover")]
		public bool StopOnHover => AbstractSliderSettingsBlock.GetStopOnHover(this);
	}

	/// <summary>Intro - Static Image Section Block</summary>
	[PublishedModel("sectionIntroStaticImageBlock")]
	public partial class SectionIntroStaticImageBlock : PublishedElementModel, IAbstractBackgroundImageBlock, IAbstractIntroBlock, IAbstractIntroSectionBlock, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionIntroStaticImageBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionIntroStaticImageBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionIntroStaticImageBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Fade Text: Fade text as you scroll downwards
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("fadeText")]
		public bool FadeText => this.Value<bool>("fadeText");

		///<summary>
		/// Keep Text Visible: Move text to try to keep it visible as you scroll downwards
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("keepTextVisible")]
		public bool KeepTextVisible => this.Value<bool>("keepTextVisible");

		///<summary>
		/// Parallax: Check this to enable parallax effect as you scroll downwards (does not work well with "keep text visible")
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("parallax")]
		public bool Parallax => this.Value<bool>("parallax");

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => AbstractBackgroundImageBlock.GetImage(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractBackgroundImageBlock.GetOverlay(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractBackgroundImageBlock.GetUseLightTextColor(this);

		///<summary>
		/// Link Buttons
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("linkButtons")]
		public Umbraco.Core.Models.Blocks.BlockListModel LinkButtons => AbstractIntroBlock.GetLinkButtons(this);

		///<summary>
		/// Subtitle
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("subtitle")]
		public string Subtitle => AbstractIntroBlock.GetSubtitle(this);

		///<summary>
		/// Summary
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("summary")]
		public string Summary => AbstractIntroBlock.GetSummary(this);

		///<summary>
		/// Light Top Menu: Enable this to have menu color in white
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("lightTopMenu")]
		public bool LightTopMenu => AbstractIntroSectionBlock.GetLightTopMenu(this);

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Intro - Static Image Section Block Settings</summary>
	[PublishedModel("sectionIntroStaticImageBlockSettings")]
	public partial class SectionIntroStaticImageBlockSettings : PublishedElementModel, IAbstractButtonLayoutBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionIntroStaticImageBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionIntroStaticImageBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionIntroStaticImageBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Button Fill: Set the background color for the button. If you don't set anything, the default for this section will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonFill")]
		public string ButtonFill => AbstractButtonLayoutBlock.GetButtonFill(this);

		///<summary>
		/// Button Outline: Check this box to have the button display an outline instead of a background color.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonOutline")]
		public bool ButtonOutline => AbstractButtonLayoutBlock.GetButtonOutline(this);

		///<summary>
		/// Button Size: Set a size for buttons on this section (0=smallest, 2=largest).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonSize")]
		public decimal ButtonSize => AbstractButtonLayoutBlock.GetButtonSize(this);
	}

	/// <summary>Intro - Video Section Block</summary>
	[PublishedModel("sectionIntroVideoBlock")]
	public partial class SectionIntroVideoBlock : PublishedElementModel, IAbstractIntroBlock, IAbstractIntroSectionBlock, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionIntroVideoBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionIntroVideoBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionIntroVideoBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Disable Loop: Disables looping of the video upon finishing playback
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disableLoop")]
		public bool DisableLoop => this.Value<bool>("disableLoop");

		///<summary>
		/// Disable Video on Mobile: Shows the background image but does not launch the video on mobile devices if checked
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disableVideoOnMobile")]
		public bool DisableVideoOnMobile => this.Value<bool>("disableVideoOnMobile");

		///<summary>
		/// Opacity: A smaller value means a more opaque video
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("opacity")]
		public decimal Opacity => this.Value<decimal>("opacity");

		///<summary>
		/// Start At: Start playing at a specific point in the video (in seconds)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("startAt")]
		public int StartAt => this.Value<int>("startAt");

		///<summary>
		/// Stop At: Stop playing at a specific point in the video (in seconds)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("stopAt")]
		public int StopAt => this.Value<int>("stopAt");

		///<summary>
		/// YouTube Video Url
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("youTubeVideoUrl")]
		public string YouTubeVideoUrl => this.Value<string>("youTubeVideoUrl");

		///<summary>
		/// Link Buttons
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("linkButtons")]
		public Umbraco.Core.Models.Blocks.BlockListModel LinkButtons => AbstractIntroBlock.GetLinkButtons(this);

		///<summary>
		/// Subtitle
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("subtitle")]
		public string Subtitle => AbstractIntroBlock.GetSubtitle(this);

		///<summary>
		/// Summary
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("summary")]
		public string Summary => AbstractIntroBlock.GetSummary(this);

		///<summary>
		/// Light Top Menu: Enable this to have menu color in white
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("lightTopMenu")]
		public bool LightTopMenu => AbstractIntroSectionBlock.GetLightTopMenu(this);

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Intro - Video Section Block Settings</summary>
	[PublishedModel("sectionIntroVideoBlockSettings")]
	public partial class SectionIntroVideoBlockSettings : PublishedElementModel, IAbstractBackgroundImageBlock, IAbstractButtonLayoutBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionIntroVideoBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionIntroVideoBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionIntroVideoBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => AbstractBackgroundImageBlock.GetImage(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractBackgroundImageBlock.GetOverlay(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractBackgroundImageBlock.GetUseLightTextColor(this);

		///<summary>
		/// Button Fill: Set the background color for the button. If you don't set anything, the default for this section will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonFill")]
		public string ButtonFill => AbstractButtonLayoutBlock.GetButtonFill(this);

		///<summary>
		/// Button Outline: Check this box to have the button display an outline instead of a background color.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonOutline")]
		public bool ButtonOutline => AbstractButtonLayoutBlock.GetButtonOutline(this);

		///<summary>
		/// Button Size: Set a size for buttons on this section (0=smallest, 2=largest).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonSize")]
		public decimal ButtonSize => AbstractButtonLayoutBlock.GetButtonSize(this);
	}

	/// <summary>Link to File</summary>
	[PublishedModel("linkToFileBlock")]
	public partial class LinkToFileBlock : PublishedElementModel, IAbstractNcLinkItemBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "linkToFileBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<LinkToFileBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public LinkToFileBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Link to File: If you specify a link here, internal link is ignored
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("fileLink")]
		public IPublishedContent FileLink => this.Value<IPublishedContent>("fileLink");

		///<summary>
		/// ALT text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altText")]
		public string AltText => AbstractNcLinkItemBlock.GetAltText(this);

		///<summary>
		/// Caption: If you don't fill this field, the element will not be displayed at all.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("caption")]
		public string Caption => AbstractNcLinkItemBlock.GetCaption(this);

		///<summary>
		/// Open Link in New Window
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("openLinkInNewWindow")]
		public bool OpenLinkInNewWindow => AbstractNcLinkItemBlock.GetOpenLinkInNewWindow(this);

		///<summary>
		/// Other Attributes
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherAttributes")]
		public Umbraco.Core.Models.Blocks.BlockListModel OtherAttributes => AbstractNcLinkItemBlock.GetOtherAttributes(this);

		///<summary>
		/// TITLE text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleText")]
		public string TitleText => AbstractNcLinkItemBlock.GetTitleText(this);

		///<summary>
		/// Use Caption as ALT and TITLE values: Check this box if you want the caption field's value to be used in the ALT and TITLE attributes as well if their respective fields are left empty.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useCaptionForAltAndTitle")]
		public bool UseCaptionForAltAndTitle => AbstractNcLinkItemBlock.GetUseCaptionForAltAndTitle(this);
	}

	/// <summary>Menu and Footer Settings</summary>
	[PublishedModel("configMenuAndFooterSettings")]
	public partial class ConfigMenuAndFooterSettings : PublishedContentModel, IAbstractConfigNode
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "configMenuAndFooterSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ConfigMenuAndFooterSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public ConfigMenuAndFooterSettings(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Copyright Text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("copyrightText")]
		public IHtmlString CopyrightText => this.Value<IHtmlString>("copyrightText");

		///<summary>
		/// Address
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("footerAddress")]
		public string FooterAddress => this.Value<string>("footerAddress");

		///<summary>
		/// Email
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("footerEmail")]
		public string FooterEmail => this.Value<string>("footerEmail");

		///<summary>
		/// Image: The image on the left. If you don't set an image, the site's logo will display by default.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("footerImage")]
		public IPublishedContent FooterImage => this.Value<IPublishedContent>("footerImage");

		///<summary>
		/// Image Link: A link the image redirects to when clicked. If you don't specify a link the image will not be clickable.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("footerImageLink")]
		public IEnumerable<IPublishedElement> FooterImageLink => this.Value<IEnumerable<IPublishedElement>>("footerImageLink");

		///<summary>
		/// Page Links (Column 1)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("footerPageLinksCol1")]
		public IEnumerable<IPublishedContent> FooterPageLinksCol1 => this.Value<IEnumerable<IPublishedContent>>("footerPageLinksCol1");

		///<summary>
		/// Page Links (Column 2)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("footerPageLinksCol2")]
		public IEnumerable<IPublishedContent> FooterPageLinksCol2 => this.Value<IEnumerable<IPublishedContent>>("footerPageLinksCol2");

		///<summary>
		/// Telephone
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("footerTel")]
		public string FooterTel => this.Value<string>("footerTel");

		///<summary>
		/// Text on the left
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("footerTextOnTheLeft")]
		public IHtmlString FooterTextOnTheLeft => this.Value<IHtmlString>("footerTextOnTheLeft");

		///<summary>
		/// Generate Automatically: If you check this, the menu will be automatically generated using all 1st-level pages on the site tree (except those who have "hide from menu" option checked). Checking this box overrides the page selector underneath.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("generateAutomatically")]
		public bool GenerateAutomatically => this.Value<bool>("generateAutomatically");

		///<summary>
		/// Hide Breadcrumbs
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideBreadcrumbs")]
		public bool HideBreadcrumbs => this.Value<bool>("hideBreadcrumbs");

		///<summary>
		/// Menu Items: Select the topmost menu items to be included. All pages below the first level will be automatically included in sub-menus, unless they have the "hide from menu" option checked.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("menuItems")]
		public IEnumerable<IPublishedContent> MenuItems => this.Value<IEnumerable<IPublishedContent>>("menuItems");

		///<summary>
		/// Swap Rows
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("swapRows")]
		public bool SwapRows => this.Value<bool>("swapRows");
	}

	/// <summary>Multi Column Section Block</summary>
	[PublishedModel("sectionMultiColBlock")]
	public partial class SectionMultiColBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionMultiColBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionMultiColBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionMultiColBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Multi Column Section Block Settings</summary>
	[PublishedModel("sectionMultiColBlockSettings")]
	public partial class SectionMultiColBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionMultiColBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionMultiColBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionMultiColBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Name - Value Pair</summary>
	[PublishedModel("NameValuePairBlock")]
	public partial class NameValuePairBlock : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "NameValuePairBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NameValuePairBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NameValuePairBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Name
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("nvName")]
		public string NvName => this.Value<string>("nvName");

		///<summary>
		/// Value
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("nvValue")]
		public string NvValue => this.Value<string>("nvValue");
	}

	/// <summary>NcCookieGroup</summary>
	[PublishedModel("ncCookieGroup")]
	public partial class NcCookieGroup : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncCookieGroup";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcCookieGroup, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcCookieGroup(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("description")]
		public IHtmlString Description => this.Value<IHtmlString>("description");

		///<summary>
		/// Group
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("group")]
		public string Group => this.Value<string>("group");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>NcImageGalleryItem</summary>
	[PublishedModel("ncImageGalleryItem")]
	public partial class NcImageGalleryItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncImageGalleryItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcImageGalleryItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcImageGalleryItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Categories
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("categories")]
		public IEnumerable<IPublishedContent> Categories => this.Value<IEnumerable<IPublishedContent>>("categories");

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => this.Value<IPublishedContent>("image");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>NcPortfolioCustomFieldItem</summary>
	[PublishedModel("ncPortfolioCustomFieldItem")]
	public partial class NcPortfolioCustomFieldItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncPortfolioCustomFieldItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcPortfolioCustomFieldItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcPortfolioCustomFieldItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Field
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("field")]
		public string Field => this.Value<string>("field");

		///<summary>
		/// Value
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("value")]
		public string Value => this.Value<string>("value");
	}

	/// <summary>NcProductMoreInfoItem</summary>
	[PublishedModel("ncProductMoreInfoItem")]
	public partial class NcProductMoreInfoItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncProductMoreInfoItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcProductMoreInfoItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcProductMoreInfoItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// File
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("file")]
		public IPublishedContent File => this.Value<IPublishedContent>("file");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>NcSliderImage</summary>
	[PublishedModel("ncSliderImage")]
	public partial class NcSliderImage : PublishedElementModel, IAbstractNcBackgroundImage, IAbstractNcButtonLayout, IAbstractNcIntro
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncSliderImage";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcSliderImage, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcSliderImage(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Larger Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largerTitle")]
		public bool LargerTitle => this.Value<bool>("largerTitle");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => AbstractNcBackgroundImage.GetImage(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractNcBackgroundImage.GetOverlay(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractNcBackgroundImage.GetUseLightTextColor(this);

		///<summary>
		/// Button Fill: Set the background color for the button. If you don't set anything, the default for this section will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonFill")]
		public string ButtonFill => AbstractNcButtonLayout.GetButtonFill(this);

		///<summary>
		/// Button Outline: Check this box to have the button display an outline instead of a background color.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonOutline")]
		public bool ButtonOutline => AbstractNcButtonLayout.GetButtonOutline(this);

		///<summary>
		/// Button Size: Set a size for buttons on this section (0=smallest, 2=largest).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonSize")]
		public decimal ButtonSize => AbstractNcButtonLayout.GetButtonSize(this);

		///<summary>
		/// Link Buttons
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("linkButtons")]
		public Umbraco.Core.Models.Blocks.BlockListModel LinkButtons => AbstractNcIntro.GetLinkButtons(this);

		///<summary>
		/// Subtitle
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("subtitle")]
		public string Subtitle => AbstractNcIntro.GetSubtitle(this);

		///<summary>
		/// Summary: Optional short text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("summary")]
		public string Summary => AbstractNcIntro.GetSummary(this);
	}

	/// <summary>Percentage Item</summary>
	[PublishedModel("blockPercentageItem")]
	public partial class BlockPercentageItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockPercentageItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockPercentageItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockPercentageItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Percentage
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("percentage")]
		public int Percentage => this.Value<int>("percentage");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Percentages Section Block</summary>
	[PublishedModel("sectionPercentagesBlock")]
	public partial class SectionPercentagesBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionPercentagesBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionPercentagesBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionPercentagesBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Percentages Section Block Settings</summary>
	[PublishedModel("sectionPercentagesBlockSettings")]
	public partial class SectionPercentagesBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionPercentagesBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionPercentagesBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionPercentagesBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Portfolio Item Page</summary>
	[PublishedModel("pagePortfolioItem")]
	public partial class PagePortfolioItem : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageBackgroundImage
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pagePortfolioItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PagePortfolioItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PagePortfolioItem(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Categories: Choose one or more categories your project belongs to. You must have defined some categories for your portfolio items first.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("categories")]
		public IEnumerable<IPublishedContent> Categories => this.Value<IEnumerable<IPublishedContent>>("categories");

		///<summary>
		/// Client: If you leave this empty, no client information will be displayed.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("client")]
		public string Client => this.Value<string>("client");

		///<summary>
		/// Content
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("content")]
		public IHtmlString Content => this.Value<IHtmlString>("content");

		///<summary>
		/// Custom fields: Enter the field title followed by its value.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("customFields")]
		public IEnumerable<NcPortfolioCustomFieldItem> CustomFields => this.Value<IEnumerable<NcPortfolioCustomFieldItem>>("customFields");

		///<summary>
		/// Do not display categories: Check this box to hide the categories list for this project from the detail page, as well as from the listing page (where it applies). If you have globally hidden categories via the parent folder's settings page then this checkbox does nothing.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("doNotDisplayCategories")]
		public bool DoNotDisplayCategories => this.Value<bool>("doNotDisplayCategories");

		///<summary>
		/// Do not display release date: Check this box to prevent the release date from displaying in the item's page. If you have globally hidden release dates via the parent folder's settings, this checkbox will do nothing. 
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("doNotDisplayReleaseDate")]
		public bool DoNotDisplayReleaseDate => this.Value<bool>("doNotDisplayReleaseDate");

		///<summary>
		/// Do not show large first image: If you have selected to show images as a list, you can check this box to prevent the first image show at full width (it will be part of the 2-column list together with other images). This is useful when, for example, you need to show a video on top and a list of images underneath.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("doNotShowLargeFirstImage")]
		public bool DoNotShowLargeFirstImage => this.Value<bool>("doNotShowLargeFirstImage");

		///<summary>
		/// Images: Pick one or more images to be displayed in your page. 
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("imageGallery")]
		public IEnumerable<IPublishedContent> ImageGallery => this.Value<IEnumerable<IPublishedContent>>("imageGallery");

		///<summary>
		/// Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("link")]
		public IEnumerable<IPublishedElement> Link => this.Value<IEnumerable<IPublishedElement>>("link");

		///<summary>
		/// List image: The image that will be used on the portfolio list. If you do not select anything here, the first image from your image gallery will be used. The image will be cropped according to your other settings (spacing, wide display)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("listImage")]
		public IPublishedContent ListImage => this.Value<IPublishedContent>("listImage");

		///<summary>
		/// Related items: Choose one or more projects related to the current one. 
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("relatedItems")]
		public IEnumerable<IPublishedContent> RelatedItems => this.Value<IEnumerable<IPublishedContent>>("relatedItems");

		///<summary>
		/// Title for Related Items section: This title will appear over the "related projects" section (wherever related projects have been defined). You can override this title per project. If you leave this empty, the title defined in the section settings will be used instead.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("relatedTitle")]
		public string RelatedTitle => this.Value<string>("relatedTitle");

		///<summary>
		/// Release date: The release date of your project. If you leave this blank, no release date will be displayed. If you have chosen to sort portfolio items by date it is essential to have a value here for proper sorting. 
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("releaseDate")]
		public DateTime ReleaseDate => this.Value<DateTime>("releaseDate");

		///<summary>
		/// Show images as list: By default, if there is more than one image in the gallery, a slider will be created. If you check this box the first image will be displayed on top (full page width) and the rest of the images will be displayed underneath it.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showImagesAsList")]
		public bool ShowImagesAsList => this.Value<bool>("showImagesAsList");

		///<summary>
		/// Summary
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("summary")]
		public string Summary => this.Value<string>("summary");

		///<summary>
		/// Video Url: Enter a YouTube or Vimeo URL as it appears in the browser's address bar (do not use the embed or share code).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("videoUrl")]
		public string VideoUrl => this.Value<string>("videoUrl");

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => AbstractOpenGraph.GetApplyToSubPages(this);

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => AbstractOpenGraph.GetMetaDescription(this);

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => AbstractOpenGraph.GetMetaKeywords(this);

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => AbstractOpenGraph.GetMetaTitle(this);

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => AbstractOpenGraph.GetOgDescription(this);

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => AbstractOpenGraph.GetOgImage(this);

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => AbstractOpenGraph.GetOgTitle(this);

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => AbstractOpenGraph.GetOgType(this);

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => AbstractOpenGraph.GetOtherHttpEquivMetaTags(this);

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => AbstractOpenGraph.GetOtherMetaTags(this);

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => AbstractOpenGraph.GetOtherProperties(this);

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => AbstractPage.GetAltTitleBreadcrumb(this);

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => AbstractPage.GetAltTitleInternal(this);

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => AbstractPage.GetAltTitleMenu(this);

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => AbstractPage.GetBrowserTitleOverride(this);

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => AbstractPage.GetCodeAfterBodyStart(this);

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => AbstractPage.GetCodeBeforeBodyEnd(this);

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => AbstractPage.GetCodeInHeadElement(this);

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => AbstractPage.GetHideFromFooter(this);

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => AbstractPage.GetHideFromSearchResults(this);

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => AbstractPage.GetHideInSitemap(this);

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => AbstractPage.GetHideWholeHierarchyFromSearhResults(this);

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => AbstractPage.GetHideWholeHierarchyFromSitemap(this);

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => AbstractPage.GetOverrideTitle(this);

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => AbstractPage.GetPriority(this);

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => AbstractPage.GetRedirect(this);

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => AbstractPage.GetUmbracoNaviHide(this);

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => AbstractPage.GetUmbracoUrlAlias(this);

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => AbstractPage.GetUmbracoUrlName(this);

		///<summary>
		/// Apply Background Image to Sub Pages: Applies the setting to sub pages, unless they have it explicitly set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyBackgroundImageToSubPages")]
		public bool ApplyBackgroundImageToSubPages => AbstractPageBackgroundImage.GetApplyBackgroundImageToSubPages(this);

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backgroundImageSummary")]
		public string BackgroundImageSummary => AbstractPageBackgroundImage.GetBackgroundImageSummary(this);

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb => AbstractPageBackgroundImage.GetHideBreadcrumb(this);

		///<summary>
		/// Keep Sub Page Title: Check this when applying a background image to sub pages in order to retain the sub page's title. If you leave it unchecked, the page will also inherit the title from the page it gets the image from.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("keepSubPageTitle")]
		public bool KeepSubPageTitle => AbstractPageBackgroundImage.GetKeepSubPageTitle(this);

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight => AbstractPageBackgroundImage.GetLargeHeight(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractPageBackgroundImage.GetOverlay(this);

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage => AbstractPageBackgroundImage.GetPageBackgroundImage(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractPageBackgroundImage.GetUseLightTextColor(this);
	}

	/// <summary>Portfolio Items Folder</summary>
	[PublishedModel("folderPortfolioItems")]
	public partial class FolderPortfolioItems : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "folderPortfolioItems";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderPortfolioItems, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public FolderPortfolioItems(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>Portfolio Section Block</summary>
	[PublishedModel("sectionPortfolioBlock")]
	public partial class SectionPortfolioBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionPortfolioBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionPortfolioBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionPortfolioBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Label for "All" category option: You can specify custom text for the "All" category option - if you don't enter text here the default setting from the Dictionary (Theme.Gallery.All) will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("allOptionLabel")]
		public string AllOptionLabel => this.Value<string>("allOptionLabel");

		///<summary>
		/// Columns: Select how many columns the images will be presented with (2 min, 4 max). If you don't specify a value, 2 columns will be rendered.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("columns")]
		public decimal Columns => this.Value<decimal>("columns");

		///<summary>
		/// Date format: Format when displaying dates. You can use standard formats like dd/MMM/yy. Default format if not specified is dd/MM/yyyy.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("dateFormat")]
		public string DateFormat => this.Value<string>("dateFormat");

		///<summary>
		/// Do not display categories: If you check this box, categories will not be displayed in the listing as well as in the detail page of each project. You can also leave this box unchecked and selectively hide the category list for specific projects in the portfolio item settings page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("doNotDisplayCategories")]
		public bool DoNotDisplayCategories => this.Value<bool>("doNotDisplayCategories");

		///<summary>
		/// Do not display release date: If you check this box, release date will not be displayed inside the page of each project. You can also leave this box unchecked and selectively hide release dates on specific projects, in the portfolio item settings page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("doNotDisplayReleaseDate")]
		public bool DoNotDisplayReleaseDate => this.Value<bool>("doNotDisplayReleaseDate");

		///<summary>
		/// Hide "All" category option: If you check this box, items will be filtered by the first category and there will be no "all" option in the category menu.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideAllCategoryOption")]
		public bool HideAllCategoryOption => this.Value<bool>("hideAllCategoryOption");

		///<summary>
		/// Hide next / previous item navigation: If you check this box, next/previous navigation will not be displayed at the bottom of each portfolio item page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideNextPrevious")]
		public bool HideNextPrevious => this.Value<bool>("hideNextPrevious");

		///<summary>
		/// Inherit background image: Check this box to have all portfolio item page inherit their top background image (and settings) from the page that contains this section
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("inheritBackgroundImage")]
		public bool InheritBackgroundImage => this.Value<bool>("inheritBackgroundImage");

		///<summary>
		/// Masonry: If you have images of uneven sizes and wish them to retain their sizes check this box. Otherwise the images will be automatically cropped around the focus point to form a grid.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("masonry")]
		public bool Masonry => this.Value<bool>("masonry");

		///<summary>
		/// Restrict next/previous projects to current project's categories: If checked, next/previous navigation will only include projects belonging to the same category (or categories) as the project being viewed.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("nextPrevRestrictToCategories")]
		public bool NextPrevRestrictToCategories => this.Value<bool>("nextPrevRestrictToCategories");

		///<summary>
		/// Random related projects: If "related projects" are empty for a specific item, display random related projects for this item.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("randomRelated")]
		public bool RandomRelated => this.Value<bool>("randomRelated");

		///<summary>
		/// Random related projects number: Number of random related items to show (only if random items are enabled). Default is 3.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("randomRelatedNumber")]
		public int RandomRelatedNumber => this.Value<int>("randomRelatedNumber");

		///<summary>
		/// Restrict random items to categories: If random related projects are enabled, checking this box restricts random projects only to categories the currently viewed item also belongs to
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("randomRelatedRestrictToCategories")]
		public bool RandomRelatedRestrictToCategories => this.Value<bool>("randomRelatedRestrictToCategories");

		///<summary>
		/// Default title for related projects section: This title will appear over the "related projects" section (wherever related projects have been defined). You can override this title per project. If you leave this empty, the section will be displayed without a title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("relatedTitle")]
		public string RelatedTitle => this.Value<string>("relatedTitle");

		///<summary>
		/// Show item count: Show a counter next to category names to indicate how many portfolio items belong to each category
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showItemCount")]
		public bool ShowItemCount => this.Value<bool>("showItemCount");

		///<summary>
		/// Sort by date: If you check this box, portfolio items will be sorted by their release date (newest first). Otherwise, they'll be sorted with their natural order.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sortByDate")]
		public bool SortByDate => this.Value<bool>("sortByDate");

		///<summary>
		/// Spacing between images: If this box is not checked, images will "stick" to each other
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("spacing")]
		public bool Spacing => this.Value<bool>("spacing");

		///<summary>
		/// Wide: Check this box to make the portfolio take the full width of the page on desktop resolutions.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("wide")]
		public bool Wide => this.Value<bool>("wide");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Portfolio Section Block Settings</summary>
	[PublishedModel("sectionPortfolioBlockSettings")]
	public partial class SectionPortfolioBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionPortfolioBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionPortfolioBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionPortfolioBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Portfolio Sections Folder</summary>
	[PublishedModel("folderPortfolioSections")]
	public partial class FolderPortfolioSections : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "folderPortfolioSections";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderPortfolioSections, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public FolderPortfolioSections(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>Pricing Item</summary>
	[PublishedModel("blockPricingItem")]
	public partial class BlockPricingItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockPricingItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockPricingItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockPricingItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Alt Label: This optional label will be displayed if no link is selected.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altLabel")]
		public string AltLabel => this.Value<string>("altLabel");

		///<summary>
		/// Currency
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("currency")]
		public string Currency => this.Value<string>("currency");

		///<summary>
		/// Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("description")]
		public IHtmlString Description => this.Value<IHtmlString>("description");

		///<summary>
		/// Highlight
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("highlight")]
		public bool Highlight => this.Value<bool>("highlight");

		///<summary>
		/// Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("link")]
		public Umbraco.Core.Models.Blocks.BlockListModel Link => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("link");

		///<summary>
		/// Period
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("period")]
		public string Period => this.Value<string>("period");

		///<summary>
		/// Price
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("price")]
		public string Price => this.Value<string>("price");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Pricing Section Block</summary>
	[PublishedModel("sectionPricingBlock")]
	public partial class SectionPricingBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionPricingBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionPricingBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionPricingBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Pricing Section Block Settings</summary>
	[PublishedModel("sectionPricingBlockSetings")]
	public partial class SectionPricingBlockSetings : PublishedElementModel, IAbstractButtonLayoutBlock, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionPricingBlockSetings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionPricingBlockSetings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionPricingBlockSetings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Button Fill: Set the background color for the button. If you don't set anything, the default for this section will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonFill")]
		public string ButtonFill => AbstractButtonLayoutBlock.GetButtonFill(this);

		///<summary>
		/// Button Outline: Check this box to have the button display an outline instead of a background color.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonOutline")]
		public bool ButtonOutline => AbstractButtonLayoutBlock.GetButtonOutline(this);

		///<summary>
		/// Button Size: Set a size for buttons on this section (0=smallest, 2=largest).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonSize")]
		public decimal ButtonSize => AbstractButtonLayoutBlock.GetButtonSize(this);

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Process Item</summary>
	[PublishedModel("blockProcessItem")]
	public partial class BlockProcessItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockProcessItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockProcessItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockProcessItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Bubble Text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("bubbleText")]
		public string BubbleText => this.Value<string>("bubbleText");

		///<summary>
		/// Icon
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("icon")]
		public object Icon => this.Value("icon");

		///<summary>
		/// Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("link")]
		public Umbraco.Core.Models.Blocks.BlockListModel Link => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("link");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Process Section Block</summary>
	[PublishedModel("sectionProcessBlock")]
	public partial class SectionProcessBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionProcessBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionProcessBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionProcessBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Process Section Block Settings</summary>
	[PublishedModel("sectionProcessBlockSettings")]
	public partial class SectionProcessBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionProcessBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionProcessBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionProcessBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// delay: Set a delay for displaying text bubbles (where defined). Default is 0 (no delay).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("bubbleDelay")]
		public int BubbleDelay => this.Value<int>("bubbleDelay");

		///<summary>
		/// Bubble follows pointer: Check this box to have text bubbles (where defined) follow the mouse pointer.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("bubbleFollow")]
		public bool BubbleFollow => this.Value<bool>("bubbleFollow");

		///<summary>
		/// Position: Select the position of text bubbles (where defined). Default is "Top".
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("bubblePosition")]
		public string BubblePosition => this.Value<string>("bubblePosition");

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Product Categories Folder</summary>
	[PublishedModel("folderProductCategories")]
	public partial class FolderProductCategories : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "folderProductCategories";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderProductCategories, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public FolderProductCategories(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>Product Category</summary>
	[PublishedModel("pageProductCategory")]
	public partial class PageProductCategory : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pageProductCategory";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageProductCategory, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PageProductCategory(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>Product Page</summary>
	[PublishedModel("pageProduct")]
	public partial class PageProduct : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageBackgroundImage, IAbstractPageSections
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pageProduct";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageProduct, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PageProduct(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("description")]
		public IHtmlString Description => this.Value<IHtmlString>("description");

		///<summary>
		/// Old Price
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("oldPrice")]
		public int OldPrice => this.Value<int>("oldPrice");

		///<summary>
		/// Price
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("price")]
		public int Price => this.Value<int>("price");

		///<summary>
		/// Product Additional Info
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("productAdditionalInfo")]
		public IEnumerable<NcProductMoreInfoItem> ProductAdditionalInfo => this.Value<IEnumerable<NcProductMoreInfoItem>>("productAdditionalInfo");

		///<summary>
		/// Product Data Sheet
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("productDataSheet")]
		public IEnumerable<NcPortfolioCustomFieldItem> ProductDataSheet => this.Value<IEnumerable<NcPortfolioCustomFieldItem>>("productDataSheet");

		///<summary>
		/// Product Images
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("productImages")]
		public IEnumerable<IPublishedContent> ProductImages => this.Value<IEnumerable<IPublishedContent>>("productImages");

		///<summary>
		/// Product Properties
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("productProperties")]
		public IEnumerable<NcPortfolioCustomFieldItem> ProductProperties => this.Value<IEnumerable<NcPortfolioCustomFieldItem>>("productProperties");

		///<summary>
		/// Related Products
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("relatedProducts")]
		public IEnumerable<IPublishedContent> RelatedProducts => this.Value<IEnumerable<IPublishedContent>>("relatedProducts");

		///<summary>
		/// Small Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("smallDescription")]
		public IHtmlString SmallDescription => this.Value<IHtmlString>("smallDescription");

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => AbstractOpenGraph.GetApplyToSubPages(this);

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => AbstractOpenGraph.GetMetaDescription(this);

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => AbstractOpenGraph.GetMetaKeywords(this);

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => AbstractOpenGraph.GetMetaTitle(this);

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => AbstractOpenGraph.GetOgDescription(this);

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => AbstractOpenGraph.GetOgImage(this);

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => AbstractOpenGraph.GetOgTitle(this);

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => AbstractOpenGraph.GetOgType(this);

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => AbstractOpenGraph.GetOtherHttpEquivMetaTags(this);

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => AbstractOpenGraph.GetOtherMetaTags(this);

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => AbstractOpenGraph.GetOtherProperties(this);

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => AbstractPage.GetAltTitleBreadcrumb(this);

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => AbstractPage.GetAltTitleInternal(this);

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => AbstractPage.GetAltTitleMenu(this);

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => AbstractPage.GetBrowserTitleOverride(this);

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => AbstractPage.GetCodeAfterBodyStart(this);

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => AbstractPage.GetCodeBeforeBodyEnd(this);

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => AbstractPage.GetCodeInHeadElement(this);

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => AbstractPage.GetHideFromFooter(this);

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => AbstractPage.GetHideFromSearchResults(this);

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => AbstractPage.GetHideInSitemap(this);

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => AbstractPage.GetHideWholeHierarchyFromSearhResults(this);

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => AbstractPage.GetHideWholeHierarchyFromSitemap(this);

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => AbstractPage.GetOverrideTitle(this);

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => AbstractPage.GetPriority(this);

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => AbstractPage.GetRedirect(this);

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => AbstractPage.GetUmbracoNaviHide(this);

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => AbstractPage.GetUmbracoUrlAlias(this);

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => AbstractPage.GetUmbracoUrlName(this);

		///<summary>
		/// Apply Background Image to Sub Pages: Applies the setting to sub pages, unless they have it explicitly set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyBackgroundImageToSubPages")]
		public bool ApplyBackgroundImageToSubPages => AbstractPageBackgroundImage.GetApplyBackgroundImageToSubPages(this);

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backgroundImageSummary")]
		public string BackgroundImageSummary => AbstractPageBackgroundImage.GetBackgroundImageSummary(this);

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb => AbstractPageBackgroundImage.GetHideBreadcrumb(this);

		///<summary>
		/// Keep Sub Page Title: Check this when applying a background image to sub pages in order to retain the sub page's title. If you leave it unchecked, the page will also inherit the title from the page it gets the image from.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("keepSubPageTitle")]
		public bool KeepSubPageTitle => AbstractPageBackgroundImage.GetKeepSubPageTitle(this);

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight => AbstractPageBackgroundImage.GetLargeHeight(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractPageBackgroundImage.GetOverlay(this);

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage => AbstractPageBackgroundImage.GetPageBackgroundImage(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractPageBackgroundImage.GetUseLightTextColor(this);

		///<summary>
		/// Intro Section
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("introSection")]
		public Umbraco.Core.Models.Blocks.BlockListModel IntroSection => AbstractPageSections.GetIntroSection(this);

		///<summary>
		/// Sections
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sections")]
		public Umbraco.Core.Models.Blocks.BlockListModel Sections => AbstractPageSections.GetSections(this);
	}

	/// <summary>Products Folder</summary>
	[PublishedModel("folderProducts")]
	public partial class FolderProducts : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "folderProducts";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FolderProducts, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public FolderProducts(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>Products List Page</summary>
	[PublishedModel("pageProductsList")]
	public partial class PageProductsList : PublishedContentModel, IAbstractOpenGraph, IAbstractPage, IAbstractPageBackgroundImage, IAbstractPageSections
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "pageProductsList";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageProductsList, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public PageProductsList(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Back to List Button Caption
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backToListButtonCaption")]
		public string BackToListButtonCaption => this.Value<string>("backToListButtonCaption");

		///<summary>
		/// Currency
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("currency")]
		public string Currency => this.Value<string>("currency");

		///<summary>
		/// Display Currency At The End Of Price: If this field is left empty, the default value is euro.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("displayCurrencyAtTheEndOfPrice")]
		public bool DisplayCurrencyAtTheEndOfPrice => this.Value<bool>("displayCurrencyAtTheEndOfPrice");

		///<summary>
		/// Hide Prices
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hidePrices")]
		public bool HidePrices => this.Value<bool>("hidePrices");

		///<summary>
		/// Layout Mode: Pick a value between 2, 3 and 4 column layout.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("layoutMode")]
		public decimal LayoutMode => this.Value<decimal>("layoutMode");

		///<summary>
		/// Products Per Page: Number of products per page. If you don't specify a value, 6 products will be displayed per page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("productsPerPage")]
		public int ProductsPerPage => this.Value<int>("productsPerPage");

		///<summary>
		/// Show Back to List Button
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showBackToListButton")]
		public bool ShowBackToListButton => this.Value<bool>("showBackToListButton");

		///<summary>
		/// Apply to Sub Pages: Check the OG properties that will also be applied to all subpages of the current page, unless explicitly defined in those pages.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyToSubPages")]
		public IEnumerable<string> ApplyToSubPages => AbstractOpenGraph.GetApplyToSubPages(this);

		///<summary>
		/// Meta Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription => AbstractOpenGraph.GetMetaDescription(this);

		///<summary>
		/// Meta Keywords
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaKeywords")]
		public string MetaKeywords => AbstractOpenGraph.GetMetaKeywords(this);

		///<summary>
		/// Meta Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("metaTitle")]
		public string MetaTitle => AbstractOpenGraph.GetMetaTitle(this);

		///<summary>
		/// OG Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogDescription")]
		public string OgDescription => AbstractOpenGraph.GetOgDescription(this);

		///<summary>
		/// OG Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogImage")]
		public IPublishedContent OgImage => AbstractOpenGraph.GetOgImage(this);

		///<summary>
		/// OG Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogTitle")]
		public string OgTitle => AbstractOpenGraph.GetOgTitle(this);

		///<summary>
		/// OG Type: Optionally define the type, e.g. website or article. If you leave this empty and have defined a default type in Site Settings, the default type will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("ogType")]
		public string OgType => AbstractOpenGraph.GetOgType(this);

		///<summary>
		/// Other Http-Equiv Meta Tags: Optionally add any meta tags that need the "http-equiv" attribute
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherHttpEquivMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherHttpEquivMetaTags => AbstractOpenGraph.GetOtherHttpEquivMetaTags(this);

		///<summary>
		/// Other Meta Tags: Optionally add any other Meta tags you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherMetaTags")]
		public IEnumerable<NcMetaTagItem> OtherMetaTags => AbstractOpenGraph.GetOtherMetaTags(this);

		///<summary>
		/// Other Properties: Optionally add any other OG properties you want to be included on the page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("otherProperties")]
		public IEnumerable<NcOpenGraphItem> OtherProperties => AbstractOpenGraph.GetOtherProperties(this);

		///<summary>
		/// Alternate Breadcrumb Page Title: If defined and there is a breadcrumb present, this title will be used instead of the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleBreadcrumb")]
		public string AltTitleBreadcrumb => AbstractPage.GetAltTitleBreadcrumb(this);

		///<summary>
		/// Alternate Internal Page Title: If defined, it will be used for the page title when viewing the page, overriding the normal node title.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleInternal")]
		public string AltTitleInternal => AbstractPage.GetAltTitleInternal(this);

		///<summary>
		/// Alternate Page Title for Menus: If defined, this will be used in menus, overriding the normal node title. A "menu" is a broad definition, so usually this will be in effect wherever a list of page names acts as a navigation tool.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("altTitleMenu")]
		public string AltTitleMenu => AbstractPage.GetAltTitleMenu(this);

		///<summary>
		/// Browser Title Override: If you leave this empty, the title appearing in the browser's tab will  be the page name (or the value of the Title Override field, if filled), suffixed by the Site Name or not depending on your settings.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("browserTitleOverride")]
		public string BrowserTitleOverride => AbstractPage.GetBrowserTitleOverride(this);

		///<summary>
		/// Code After Body Start
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeAfterBodyStart")]
		public string CodeAfterBodyStart => AbstractPage.GetCodeAfterBodyStart(this);

		///<summary>
		/// Code Before Body End
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeBeforeBodyEnd")]
		public string CodeBeforeBodyEnd => AbstractPage.GetCodeBeforeBodyEnd(this);

		///<summary>
		/// Code in Head Element
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("codeInHeadElement")]
		public string CodeInHeadElement => AbstractPage.GetCodeInHeadElement(this);

		///<summary>
		/// Hide from Footer: Check if you need to exclude this page from any footer links (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromFooter")]
		public bool HideFromFooter => AbstractPage.GetHideFromFooter(this);

		///<summary>
		/// Hide from Search Results: Check this to prevent this page from appearing in search results in case your site features search functionality
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideFromSearchResults")]
		public bool HideFromSearchResults => AbstractPage.GetHideFromSearchResults(this);

		///<summary>
		/// Hide in Sitemap: Check this box if you don't want the page to appear in the XML Sitemap
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideInSitemap")]
		public bool HideInSitemap => AbstractPage.GetHideInSitemap(this);

		///<summary>
		/// Hide Whole Hierarchy from Search Results: Check this to prevent this page and all of its subpages from appearing in search results.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSearhResults")]
		public bool HideWholeHierarchyFromSearhResults => AbstractPage.GetHideWholeHierarchyFromSearhResults(this);

		///<summary>
		/// Hide Whole Hierarchy from Sitemap: Checking this box will hide this page and all of its subpages from the site map.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideWholeHierarchyFromSitemap")]
		public bool HideWholeHierarchyFromSitemap => AbstractPage.GetHideWholeHierarchyFromSitemap(this);

		///<summary>
		/// Title Override: If you define an Override Title, the title of the node (as it appears on the tree on the left) will be IGNORED and this title will be used instead. The rest of the alternate titles (menu, breadcrumb etc.), if defined, will still be in effect.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overrideTitle")]
		public string OverrideTitle => AbstractPage.GetOverrideTitle(this);

		///<summary>
		/// Priority: Default is 0.5
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("priority")]
		public decimal Priority => AbstractPage.GetPriority(this);

		///<summary>
		/// Redirect: Choose a redirection method for your current page. You can redirect to another page within the site, an external URL, or the first child page of the current page.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirect")]
		public IEnumerable<IPublishedElement> Redirect => AbstractPage.GetRedirect(this);

		///<summary>
		/// Hide from Menu: Check if you need to hide this page from any menus (provided that it normally appears there)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide => AbstractPage.GetUmbracoNaviHide(this);

		///<summary>
		/// Alternate URL(s): Enter one or more alternate URLs, separated by comma. For example, if your URL was /some-category/some-page/content-node, by adding an umbracoUrlAlias of “flowers”, a user can navigate to the node by simply going to /flowers. You can also specify paths like “flowers/roses/red”.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias => AbstractPage.GetUmbracoUrlAlias(this);

		///<summary>
		/// URL part substitution: Normally, the name of the page is used as part of the SEO URL. Here you can provide your own alternate string for this part of the URL.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName => AbstractPage.GetUmbracoUrlName(this);

		///<summary>
		/// Apply Background Image to Sub Pages: Applies the setting to sub pages, unless they have it explicitly set.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("applyBackgroundImageToSubPages")]
		public bool ApplyBackgroundImageToSubPages => AbstractPageBackgroundImage.GetApplyBackgroundImageToSubPages(this);

		///<summary>
		/// Summary: Enter a summary which will appear under the page title. If breadcrumbs are enabled summary will appear underneath the breadcrumb.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("backgroundImageSummary")]
		public string BackgroundImageSummary => AbstractPageBackgroundImage.GetBackgroundImageSummary(this);

		///<summary>
		/// Hide Breadcrumb: Hides the generated breadcrumb from the top image. You can also globally hide all breadcrumbs by checking a box in Site Configuration.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideBreadcrumb")]
		public bool HideBreadcrumb => AbstractPageBackgroundImage.GetHideBreadcrumb(this);

		///<summary>
		/// Keep Sub Page Title: Check this when applying a background image to sub pages in order to retain the sub page's title. If you leave it unchecked, the page will also inherit the title from the page it gets the image from.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("keepSubPageTitle")]
		public bool KeepSubPageTitle => AbstractPageBackgroundImage.GetKeepSubPageTitle(this);

		///<summary>
		/// Large height: Set a height for the background image. If you check this box the image will have a larger height.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largeHeight")]
		public bool LargeHeight => AbstractPageBackgroundImage.GetLargeHeight(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractPageBackgroundImage.GetOverlay(this);

		///<summary>
		/// Background Image: Optionally set a background image for the top section of the page. If you don't set an image then no other settings defined here will apply.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("pageBackgroundImage")]
		public IPublishedContent PageBackgroundImage => AbstractPageBackgroundImage.GetPageBackgroundImage(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractPageBackgroundImage.GetUseLightTextColor(this);

		///<summary>
		/// Intro Section
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("introSection")]
		public Umbraco.Core.Models.Blocks.BlockListModel IntroSection => AbstractPageSections.GetIntroSection(this);

		///<summary>
		/// Sections
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sections")]
		public Umbraco.Core.Models.Blocks.BlockListModel Sections => AbstractPageSections.GetSections(this);
	}

	/// <summary>Redirect to First Sub-Page</summary>
	[PublishedModel("ncRedirectToFirstSubPage")]
	public partial class NcRedirectToFirstSubPage : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncRedirectToFirstSubPage";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcRedirectToFirstSubPage, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcRedirectToFirstSubPage(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Permanent Redirect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("permanentRedirect")]
		public bool PermanentRedirect => this.Value<bool>("permanentRedirect");
	}

	/// <summary>Redirect to Page</summary>
	[PublishedModel("ncRedirectToPage")]
	public partial class NcRedirectToPage : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncRedirectToPage";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcRedirectToPage, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcRedirectToPage(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Permanent Redirect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("permanentRedirect")]
		public bool PermanentRedirect => this.Value<bool>("permanentRedirect");

		///<summary>
		/// Redirect to Page
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirectToPage")]
		public IPublishedContent RedirectToPage => this.Value<IPublishedContent>("redirectToPage");
	}

	/// <summary>Redirect to Url</summary>
	[PublishedModel("ncRedirectToUrl")]
	public partial class NcRedirectToUrl : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncRedirectToUrl";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcRedirectToUrl, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcRedirectToUrl(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Permanent Redirect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("permanentRedirect")]
		public bool PermanentRedirect => this.Value<bool>("permanentRedirect");

		///<summary>
		/// Redirect To Url
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("redirectToUrl")]
		public string RedirectToUrl => this.Value<string>("redirectToUrl");
	}

	/// <summary>Service Item</summary>
	[PublishedModel("blockServiceItem")]
	public partial class BlockServiceItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockServiceItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockServiceItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockServiceItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Custom Icon: Pick your own icon. This will override the Icon.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("customIcon")]
		public IPublishedContent CustomIcon => this.Value<IPublishedContent>("customIcon");

		///<summary>
		/// Description
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("description")]
		public string Description => this.Value<string>("description");

		///<summary>
		/// Icon
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("icon")]
		public object Icon => this.Value("icon");

		///<summary>
		/// Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("link")]
		public Umbraco.Core.Models.Blocks.BlockListModel Link => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("link");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Services Section Block</summary>
	[PublishedModel("sectionServicesBlock")]
	public partial class SectionServicesBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionServicesBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionServicesBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionServicesBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Image Size: Images have always same height & width
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("imageSize")]
		public decimal ImageSize => this.Value<decimal>("imageSize");

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Number of Columns: Enter the number of columns (items per row) to be displayed.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("numberOfColumns")]
		public decimal NumberOfColumns => this.Value<decimal>("numberOfColumns");

		///<summary>
		/// Text Orientation: Default is text center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("textOrientation")]
		public string TextOrientation => this.Value<string>("textOrientation");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Services Section Block Settings</summary>
	[PublishedModel("sectionServicesBlockSettings")]
	public partial class SectionServicesBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionServicesBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionServicesBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionServicesBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Text Orientation: Default is text center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("textOrientation")]
		public string TextOrientation => this.Value<string>("textOrientation");

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Simple Image Gallery Section Block</summary>
	[PublishedModel("sectionSimpleImageGalleryBlock")]
	public partial class SectionSimpleImageGalleryBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionSimpleImageGalleryBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionSimpleImageGalleryBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionSimpleImageGalleryBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Columns: Select how many columns the images will be presented with.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("columns")]
		public decimal Columns => this.Value<decimal>("columns");

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public IEnumerable<IPublishedContent> Items => this.Value<IEnumerable<IPublishedContent>>("items");

		///<summary>
		/// Masonry: If you have images of uneven sizes and wish them to retain their sizes check this box. Otherwise the images will be automatically cropped around the focus point to form a grid.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("masonry")]
		public bool Masonry => this.Value<bool>("masonry");

		///<summary>
		/// Spacing between images: If this box is not checked, images will "stick" to each other
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("spacing")]
		public bool Spacing => this.Value<bool>("spacing");

		///<summary>
		/// Upscale Images: If you check this box, the images displayed when a user clicks on the thumbs will be upscaled to match a maximum presentation size for the screen. Otherwise, they will be displayed at their original size.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("upscaleImages")]
		public bool UpscaleImages => this.Value<bool>("upscaleImages");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Simple Image Gallery Section Block Settings</summary>
	[PublishedModel("sectionSimpleImageGalleryBlockSettings")]
	public partial class SectionSimpleImageGalleryBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionSimpleImageGalleryBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionSimpleImageGalleryBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionSimpleImageGalleryBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Slider Image</summary>
	[PublishedModel("blockSliderImage")]
	public partial class BlockSliderImage : PublishedElementModel, IAbstractBackgroundImageBlock, IAbstractButtonLayoutBlock, IAbstractIntroBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockSliderImage";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockSliderImage, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockSliderImage(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Larger Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largerTitle")]
		public bool LargerTitle => this.Value<bool>("largerTitle");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => AbstractBackgroundImageBlock.GetImage(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractBackgroundImageBlock.GetOverlay(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractBackgroundImageBlock.GetUseLightTextColor(this);

		///<summary>
		/// Button Fill: Set the background color for the button. If you don't set anything, the default for this section will be applied.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonFill")]
		public string ButtonFill => AbstractButtonLayoutBlock.GetButtonFill(this);

		///<summary>
		/// Button Outline: Check this box to have the button display an outline instead of a background color.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonOutline")]
		public bool ButtonOutline => AbstractButtonLayoutBlock.GetButtonOutline(this);

		///<summary>
		/// Button Size: Set a size for buttons on this section (0=smallest, 2=largest).
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("buttonSize")]
		public decimal ButtonSize => AbstractButtonLayoutBlock.GetButtonSize(this);

		///<summary>
		/// Link Buttons
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("linkButtons")]
		public Umbraco.Core.Models.Blocks.BlockListModel LinkButtons => AbstractIntroBlock.GetLinkButtons(this);

		///<summary>
		/// Subtitle
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("subtitle")]
		public string Subtitle => AbstractIntroBlock.GetSubtitle(this);

		///<summary>
		/// Summary
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("summary")]
		public string Summary => AbstractIntroBlock.GetSummary(this);
	}

	/// <summary>Statement Section Block</summary>
	[PublishedModel("sectionStatementBlock")]
	public partial class SectionStatementBlock : PublishedElementModel, IAbstractBackgroundImageBlock, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionStatementBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionStatementBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionStatementBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Icon: Enter the class for the icon you need. You can find the names at http://ionicons.com/
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("icon")]
		public object Icon => this.Value("icon");

		///<summary>
		/// Link: You can enter a YouTube link as an external link. Doing that will launch a pop-up player when the user clicks on the link.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("link")]
		public Umbraco.Core.Models.Blocks.BlockListModel Link => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("link");

		///<summary>
		/// Text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("text")]
		public string Text => this.Value<string>("text");

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => AbstractBackgroundImageBlock.GetImage(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractBackgroundImageBlock.GetOverlay(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractBackgroundImageBlock.GetUseLightTextColor(this);

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Statement Section Block Settings</summary>
	[PublishedModel("sectionStatementBlockSettings")]
	public partial class SectionStatementBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionStatementBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionStatementBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionStatementBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Text Orientation: Default orientation is text center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("textOrientation")]
		public string TextOrientation => this.Value<string>("textOrientation");

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);
	}

	/// <summary>Team Item</summary>
	[PublishedModel("blockTeamItem")]
	public partial class BlockTeamItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockTeamItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockTeamItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockTeamItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Facebook URL
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("facebookURL")]
		public string FacebookUrl => this.Value<string>("facebookURL");

		///<summary>
		/// GitHub URL
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("gitHubURL")]
		public string GitHubUrl => this.Value<string>("gitHubURL");

		///<summary>
		/// Google Plus URL
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("googlePlusURL")]
		public string GooglePlusUrl => this.Value<string>("googlePlusURL");

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => this.Value<IPublishedContent>("image");

		///<summary>
		/// Link
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("link")]
		public Umbraco.Core.Models.Blocks.BlockListModel Link => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("link");

		///<summary>
		/// LinkedIn URL
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("linkedInURL")]
		public string LinkedInUrl => this.Value<string>("linkedInURL");

		///<summary>
		/// Personal Page URL
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("personalPageURL")]
		public string PersonalPageUrl => this.Value<string>("personalPageURL");

		///<summary>
		/// Pinterest URL
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("pinterestURL")]
		public string PinterestUrl => this.Value<string>("pinterestURL");

		///<summary>
		/// Role
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("role")]
		public string Role => this.Value<string>("role");

		///<summary>
		/// Summary
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("summary")]
		public string Summary => this.Value<string>("summary");

		///<summary>
		/// Team Member Name
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("teamMemberName")]
		public string TeamMemberName => this.Value<string>("teamMemberName");

		///<summary>
		/// Tumblr URL
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("tumblrURL")]
		public string TumblrUrl => this.Value<string>("tumblrURL");

		///<summary>
		/// Twitter URL
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("twitterURL")]
		public string TwitterUrl => this.Value<string>("twitterURL");

		///<summary>
		/// Vimeo URL
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("vimeoURL")]
		public string VimeoUrl => this.Value<string>("vimeoURL");

		///<summary>
		/// Youtube URL
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("youtubeURL")]
		public string YoutubeUrl => this.Value<string>("youtubeURL");
	}

	/// <summary>Team Section Block</summary>
	[PublishedModel("sectionTeamBlock")]
	public partial class SectionTeamBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionTeamBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionTeamBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionTeamBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Appearance
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("appearance")]
		public string Appearance => this.Value<string>("appearance");

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Team Section Block Settings</summary>
	[PublishedModel("sectionTeamBlockSettings")]
	public partial class SectionTeamBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock, IAbstractSliderSettingsBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionTeamBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionTeamBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionTeamBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);

		///<summary>
		/// Auto Height: Check to automatically adjust height to the content of each slide. Leave unchecked to have a stable height equal to the largest slide's height for all slides.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("autoHeight")]
		public bool AutoHeight => AbstractSliderSettingsBlock.GetAutoHeight(this);

		///<summary>
		/// Manual Play: Check to disable autoplay for the slider
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("manualPlay")]
		public bool ManualPlay => AbstractSliderSettingsBlock.GetManualPlay(this);

		///<summary>
		/// Show Bullets: Check to show slide bullets at the bottom of slides
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showBullets")]
		public bool ShowBullets => AbstractSliderSettingsBlock.GetShowBullets(this);

		///<summary>
		/// Show Navigation Buttons: Check to show next/previous buttons.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showNavigationButtons")]
		public bool ShowNavigationButtons => AbstractSliderSettingsBlock.GetShowNavigationButtons(this);

		///<summary>
		/// Slide Speed: Time each slide remains on screen (in MS). Leave this setting to 0 to apply the default speed for this slider.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("slideSpeed")]
		public decimal SlideSpeed => AbstractSliderSettingsBlock.GetSlideSpeed(this);

		///<summary>
		/// Stop On Hover: Check to make the slider stop changing slides when pointer is over it
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("stopOnHover")]
		public bool StopOnHover => AbstractSliderSettingsBlock.GetStopOnHover(this);
	}

	/// <summary>Testimonial Item</summary>
	[PublishedModel("blockTestimonialItem")]
	public partial class BlockTestimonialItem : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "blockTestimonialItem";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlockTestimonialItem, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public BlockTestimonialItem(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Company, Location or Profession
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("authorAdditionalInfo")]
		public string AuthorAdditionalInfo => this.Value<string>("authorAdditionalInfo");

		///<summary>
		/// Lead
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("lead")]
		public string Lead => this.Value<string>("lead");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Testimonials Section Block</summary>
	[PublishedModel("sectionTestimonialsBlock")]
	public partial class SectionTestimonialsBlock : PublishedElementModel, IAbstractBackgroundImageBlock, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionTestimonialsBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionTestimonialsBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionTestimonialsBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Items
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("items")]
		public Umbraco.Core.Models.Blocks.BlockListModel Items => this.Value<Umbraco.Core.Models.Blocks.BlockListModel>("items");

		///<summary>
		/// Image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("image")]
		public IPublishedContent Image => AbstractBackgroundImageBlock.GetImage(this);

		///<summary>
		/// Overlay: 0=no overlay, choose a lesser value for a lighter overlay, or a larger value for a darker overlay.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("overlay")]
		public decimal Overlay => AbstractBackgroundImageBlock.GetOverlay(this);

		///<summary>
		/// Use Light Text Color: Check to use light color for text. If unchecked, dark color will be used.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("useLightTextColor")]
		public bool UseLightTextColor => AbstractBackgroundImageBlock.GetUseLightTextColor(this);

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Testimonials Section Block Settings</summary>
	[PublishedModel("sectionTestimonialsBlockSettings")]
	public partial class SectionTestimonialsBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSliderSettingsBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionTestimonialsBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionTestimonialsBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionTestimonialsBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Text Orientation: Default text orientation is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("textOrientation")]
		public string TextOrientation => this.Value<string>("textOrientation");

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Auto Height: Check to automatically adjust height to the content of each slide. Leave unchecked to have a stable height equal to the largest slide's height for all slides.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("autoHeight")]
		public bool AutoHeight => AbstractSliderSettingsBlock.GetAutoHeight(this);

		///<summary>
		/// Manual Play: Check to disable autoplay for the slider
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("manualPlay")]
		public bool ManualPlay => AbstractSliderSettingsBlock.GetManualPlay(this);

		///<summary>
		/// Show Bullets: Check to show slide bullets at the bottom of slides
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showBullets")]
		public bool ShowBullets => AbstractSliderSettingsBlock.GetShowBullets(this);

		///<summary>
		/// Show Navigation Buttons: Check to show next/previous buttons.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showNavigationButtons")]
		public bool ShowNavigationButtons => AbstractSliderSettingsBlock.GetShowNavigationButtons(this);

		///<summary>
		/// Slide Speed: Time each slide remains on screen (in MS). Leave this setting to 0 to apply the default speed for this slider.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("slideSpeed")]
		public decimal SlideSpeed => AbstractSliderSettingsBlock.GetSlideSpeed(this);

		///<summary>
		/// Stop On Hover: Check to make the slider stop changing slides when pointer is over it
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("stopOnHover")]
		public bool StopOnHover => AbstractSliderSettingsBlock.GetStopOnHover(this);
	}

	/// <summary>Text Section Block</summary>
	[PublishedModel("sectionTextBlock")]
	public partial class SectionTextBlock : PublishedElementModel, IAbstractSectionBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionTextBlock";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionTextBlock, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionTextBlock(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Center text and title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("centerTextAndTitle")]
		public bool CenterTextAndTitle => this.Value<bool>("centerTextAndTitle");

		///<summary>
		/// Larger text: Check this box to make text appear with a larger font
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("largerText")]
		public bool LargerText => this.Value<bool>("largerText");

		///<summary>
		/// Text
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("textContent")]
		public IHtmlString TextContent => this.Value<IHtmlString>("textContent");

		///<summary>
		/// Wide text: Check this box to make the section occupy more horizontal space (this has no effect is the section is used as part of a multi-column layout)
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("wideText")]
		public bool WideText => this.Value<bool>("wideText");

		///<summary>
		/// Disable Section: Check this to temporarily disable this block from rendering in the front-end.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("disabled")]
		public bool Disabled => AbstractSectionBlock.GetDisabled(this);

		///<summary>
		/// Section Title: Enter a title for this section. This will be used in the back office editor, as well as in the front-end if the section is configured to display a header.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionTitle")]
		public string SectionTitle => AbstractSectionBlock.GetSectionTitle(this);
	}

	/// <summary>Text Section Block Settings</summary>
	[PublishedModel("sectionTextBlockSettings")]
	public partial class SectionTextBlockSettings : PublishedElementModel, IAbstractSectionEffectsBlock, IAbstractSectionLayoutBlock, IAbstractSectionTitleBlock
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "sectionTextBlockSettings";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SectionTextBlockSettings, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public SectionTextBlockSettings(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Animation Direction: Choose the direction from which the animation will start. If you leave this selection empty and animations are enabled, the section will just "fade" in place.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationDirection")]
		public string AnimationDirection => AbstractSectionEffectsBlock.GetAnimationDirection(this);

		///<summary>
		/// Enable Animation: Check this box to make this section animate. You can then specify the exact kind of animation using the options below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationEnable")]
		public bool AnimationEnable => AbstractSectionEffectsBlock.GetAnimationEnable(this);

		///<summary>
		/// Larger Animation: Check this to amplify the animation effect
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("animationLarger")]
		public bool AnimationLarger => AbstractSectionEffectsBlock.GetAnimationLarger(this);

		///<summary>
		/// Section Margin: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMargin")]
		public string SectionMargin => AbstractSectionLayoutBlock.GetSectionMargin(this);

		///<summary>
		/// Section Margin (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginExtraSmallScreens")]
		public string SectionMarginExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionMarginExtraSmallScreens(this);

		///<summary>
		/// Section Margin (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionMarginMobile")]
		public string SectionMarginMobile => AbstractSectionLayoutBlock.GetSectionMarginMobile(this);

		///<summary>
		/// Section Padding: If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPadding")]
		public string SectionPadding => AbstractSectionLayoutBlock.GetSectionPadding(this);

		///<summary>
		/// Section Padding (Extra Small Screens): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingExtraSmallScreens")]
		public string SectionPaddingExtraSmallScreens => AbstractSectionLayoutBlock.GetSectionPaddingExtraSmallScreens(this);

		///<summary>
		/// Section Padding (Mobile): If not set, padding will be defined by default settings
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("sectionPaddingMobile")]
		public string SectionPaddingMobile => AbstractSectionLayoutBlock.GetSectionPaddingMobile(this);

		///<summary>
		/// Hide Title: Check this to completely hide the title. Hiding the title overrides the settings below.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideTitle")]
		public bool HideTitle => AbstractSectionTitleBlock.GetHideTitle(this);

		///<summary>
		/// Title Orientation: Default is center
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleOrientation")]
		public string TitleOrientation => AbstractSectionTitleBlock.GetTitleOrientation(this);

		///<summary>
		/// Title Size: No selection = Normal (H3). Other selections (in order of size) emit H4, H5, and H6 tags respectively.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSize")]
		public string TitleSize => AbstractSectionTitleBlock.GetTitleSize(this);

		///<summary>
		/// Title Spacing: Spacing of title from content (in pixels). No selection = default spacing
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("titleSpacing")]
		public string TitleSpacing => AbstractSectionTitleBlock.GetTitleSpacing(this);
	}

	/// <summary>Widget - Categories List</summary>
	[PublishedModel("ncWidgetCategoriesList")]
	public partial class NcWidgetCategoriesList : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncWidgetCategoriesList";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcWidgetCategoriesList, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcWidgetCategoriesList(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Hide Empty Categories
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("hideEmptyCategories")]
		public bool HideEmptyCategories => this.Value<bool>("hideEmptyCategories");

		///<summary>
		/// Order Categories By Post Count: Leave this unchecked to have categories ordered alphabetically
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("orderCategoriesByPostCount")]
		public bool OrderCategoriesByPostCount => this.Value<bool>("orderCategoriesByPostCount");

		///<summary>
		/// Show Post Count in Categories: Check this box if you want the categories list to show a count of posts in each category. Works only if categories are enabled.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showPostCountInCategories")]
		public bool ShowPostCountInCategories => this.Value<bool>("showPostCountInCategories");

		///<summary>
		/// Show RSS Link: Check this to display an RSS link for each category
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("showRSSLink")]
		public bool ShowRsslink => this.Value<bool>("showRSSLink");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Widget - Popular Tags</summary>
	[PublishedModel("ncWidgetPopularTags")]
	public partial class NcWidgetPopularTags : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncWidgetPopularTags";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcWidgetPopularTags, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcWidgetPopularTags(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Max Tags to Show: The maximum number of popular tags to show in the side bar (if enabled). The default number is 10.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("maxTagsToShow")]
		public int MaxTagsToShow => this.Value<int>("maxTagsToShow");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Widget - Recent Posts</summary>
	[PublishedModel("ncWidgetsRecentPosts")]
	public partial class NcWidgetsRecentPosts : PublishedElementModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "ncWidgetsRecentPosts";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NcWidgetsRecentPosts, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public NcWidgetsRecentPosts(IPublishedElement content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Max Recent Articles to Show: The maximum number of recent articles to be shown in the "Recent Articles" list (if it is enabled). If this is left empty, 3 articles will be shown by default.
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("maxRecentArticlesToShow")]
		public int MaxRecentArticlesToShow => this.Value<int>("maxRecentArticlesToShow");

		///<summary>
		/// Title
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("title")]
		public string Title => this.Value<string>("title");
	}

	/// <summary>Folder</summary>
	[PublishedModel("Folder")]
	public partial class Folder : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "Folder";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Folder, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public Folder(IPublishedContent content)
			: base(content)
		{ }

		// properties
	}

	/// <summary>Image</summary>
	[PublishedModel("Image")]
	public partial class Image : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "Image";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Image, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public Image(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Size: in bytes
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoBytes")]
		public long UmbracoBytes => this.Value<long>("umbracoBytes");

		///<summary>
		/// Type
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension => this.Value<string>("umbracoExtension");

		///<summary>
		/// Upload image
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoFile")]
		public Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue UmbracoFile => this.Value<Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue>("umbracoFile");

		///<summary>
		/// Height: in pixels
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoHeight")]
		public int UmbracoHeight => this.Value<int>("umbracoHeight");

		///<summary>
		/// Width: in pixels
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoWidth")]
		public int UmbracoWidth => this.Value<int>("umbracoWidth");
	}

	/// <summary>File</summary>
	[PublishedModel("File")]
	public partial class File : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "File";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<File, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public File(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Size: in bytes
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoBytes")]
		public long UmbracoBytes => this.Value<long>("umbracoBytes");

		///<summary>
		/// Type
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension => this.Value<string>("umbracoExtension");

		///<summary>
		/// Upload file
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoFile")]
		public string UmbracoFile => this.Value<string>("umbracoFile");
	}

	/// <summary>Member</summary>
	[PublishedModel("Member")]
	public partial class Member : PublishedContentModel
	{
		// helpers
#pragma warning disable 0109 // new is redundant
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const string ModelTypeAlias = "Member";
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new const PublishedItemType ModelItemType = PublishedItemType.Member;
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public new static IPublishedContentType GetModelContentType()
			=> PublishedModelUtility.GetModelContentType(ModelItemType, ModelTypeAlias);
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		public static IPublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Member, TValue>> selector)
			=> PublishedModelUtility.GetModelPropertyType(GetModelContentType(), selector);
#pragma warning restore 0109

		// ctor
		public Member(IPublishedContent content)
			: base(content)
		{ }

		// properties

		///<summary>
		/// Is Approved
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoMemberApproved")]
		public bool UmbracoMemberApproved => this.Value<bool>("umbracoMemberApproved");

		///<summary>
		/// Comments
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoMemberComments")]
		public string UmbracoMemberComments => this.Value<string>("umbracoMemberComments");

		///<summary>
		/// Failed Password Attempts
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoMemberFailedPasswordAttempts")]
		public int UmbracoMemberFailedPasswordAttempts => this.Value<int>("umbracoMemberFailedPasswordAttempts");

		///<summary>
		/// Last Lockout Date
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoMemberLastLockoutDate")]
		public DateTime UmbracoMemberLastLockoutDate => this.Value<DateTime>("umbracoMemberLastLockoutDate");

		///<summary>
		/// Last Login Date
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoMemberLastLogin")]
		public DateTime UmbracoMemberLastLogin => this.Value<DateTime>("umbracoMemberLastLogin");

		///<summary>
		/// Last Password Change Date
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoMemberLastPasswordChangeDate")]
		public DateTime UmbracoMemberLastPasswordChangeDate => this.Value<DateTime>("umbracoMemberLastPasswordChangeDate");

		///<summary>
		/// Is Locked Out
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoMemberLockedOut")]
		public bool UmbracoMemberLockedOut => this.Value<bool>("umbracoMemberLockedOut");

		///<summary>
		/// Password Answer
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoMemberPasswordRetrievalAnswer")]
		public DateTime UmbracoMemberPasswordRetrievalAnswer => this.Value<DateTime>("umbracoMemberPasswordRetrievalAnswer");

		///<summary>
		/// Password Question
		///</summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Umbraco.ModelsBuilder", "8.1.0")]
		[ImplementPropertyType("umbracoMemberPasswordRetrievalQuestion")]
		public DateTime UmbracoMemberPasswordRetrievalQuestion => this.Value<DateTime>("umbracoMemberPasswordRetrievalQuestion");
	}

}
